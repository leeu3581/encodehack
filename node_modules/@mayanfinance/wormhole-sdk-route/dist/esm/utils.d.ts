import { ChainName as MayanChainName, SolanaTransactionSigner } from "@mayanfinance/swap-sdk";
import { Chain, Signer, TokenId, TransactionId, routes, Network } from "@wormhole-foundation/sdk-connect";
import { ethers } from "ethers";
export declare function getNativeContractAddress(chain: Chain): string;
export declare function getDefaultDeadline(chain: Chain): number;
export declare function toMayanChainName(chain: Chain): MayanChainName;
export declare function fromMayanChainName(mayanChain: MayanChainName): Chain;
export declare function toWormholeChainName(chainIdStr: string): Chain;
export declare function supportedChains(): Chain[];
export declare function fetchTokensForChain(chain: Chain): Promise<TokenId[]>;
export declare function mayanSolanaSigner(signer: Signer): SolanaTransactionSigner;
export declare function mayanEvmSigner(signer: Signer): ethers.Signer;
export declare function mayanEvmProvider(signer: ethers.Signer): {
    getBlock: () => Promise<{
        timestamp: number;
    }>;
};
export declare enum MayanClientStatus {
    INPROGRESS = "INPROGRESS",
    COMPLETED = "COMPLETED",
    REFUNDED = "REFUNDED",
    CANCELED = "CANCELED"
}
export declare enum MayanTransactionGoal {
    Send = "SEND",
    Bridge = "BRIDGE",
    Swap = "SWAP",
    Register = "REGISTER",
    Settle = "SETTLE"
}
export interface TransactionStatus {
    id: string;
    trader: string;
    sourceChain: string;
    sourceTxHash: string;
    sourceTxBlockNo: number;
    transferSequence: string;
    swapSequence: string;
    redeemSequence: string;
    refundSequence: string;
    fulfillSequence: string;
    deadline: string;
    swapChain: string;
    refundChain: string;
    destChain: string;
    destAddress: string;
    fromTokenAddress: string;
    fromTokenChain: string;
    fromTokenSymbol: string;
    fromAmount: string;
    fromAmount64: any;
    toTokenAddress: string;
    toTokenChain: string;
    toTokenSymbol: string;
    stateAddr: string;
    stateNonce: string;
    toAmount: any;
    transferSignedVaa: string;
    swapSignedVaa: string;
    redeemSignedVaa: string;
    refundSignedVaa: string;
    fulfillSignedVaa: string;
    savedAt: string;
    initiatedAt: string;
    completedAt: string;
    insufficientFees: boolean;
    retries: number;
    swapRelayerFee: string;
    redeemRelayerFee: string;
    refundRelayerFee: string;
    bridgeFee: string;
    statusUpdatedAt: string;
    redeemTxHash: string;
    refundTxHash: string;
    fulfillTxHash: string;
    unwrapRedeem: boolean;
    unwrapRefund: boolean;
    auctionAddress: string;
    driverAddress: string;
    mayanAddress: string;
    referrerAddress: string;
    auctionStateAddr: any;
    auctionStateNonce: any;
    gasDrop: string;
    gasDrop64: any;
    payloadId: number;
    orderHash: string;
    minAmountOut: any;
    minAmountOut64: any;
    service: string;
    refundAmount: string;
    posAddress: string;
    unlockRecipient: any;
    fromTokenLogoUri: string;
    toTokenLogoUri: string;
    fromTokenScannerUrl: string;
    toTokenScannerUrl: string;
    txs: Tx[];
    clientStatus: MayanClientStatus;
}
export interface Tx {
    txHash: string;
    goals: MayanTransactionGoal[];
    scannerUrl: string;
}
export declare function txStatusToReceipt(txStatus: TransactionStatus): routes.Receipt;
export declare function getTransactionStatus(tx: TransactionId): Promise<TransactionStatus | null>;
export declare function getUSDCTokenId(chain: Chain, network: Network): TokenId | undefined;
//# sourceMappingURL=utils.d.ts.map