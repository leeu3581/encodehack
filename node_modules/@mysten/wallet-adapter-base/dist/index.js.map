{"version":3,"sources":["../src/index.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SuiTransactionBlockResponse } from '@mysten/sui.js/client';\nimport {\n\tSuiSignTransactionBlockInput,\n\tSuiSignAndExecuteTransactionBlockInput,\n\tWalletAccount,\n\tSuiSignMessageInput,\n\tSuiSignPersonalMessageInput,\n} from '@mysten/wallet-standard';\n\nexport interface WalletAdapterEvents {\n\tchange(changes: { connected?: boolean; accounts?: readonly WalletAccount[] }): void;\n}\n\nexport interface WalletAdapter {\n\t// Metadata\n\tname: string;\n\ticon?: string;\n\n\tconnected: boolean;\n\tconnecting: boolean;\n\t// Connection Management\n\tconnect: () => Promise<void>;\n\tdisconnect: () => Promise<void>;\n\ton: <E extends keyof WalletAdapterEvents>(\n\t\tevent: E,\n\t\tcallback: WalletAdapterEvents[E],\n\t) => () => void;\n\t/** @deprecated Use `signPersonalMessage` instead. */\n\tsignMessage?(messageInput: SuiSignMessageInput): Promise<{\n\t\tmessageBytes: string;\n\t\tsignature: string;\n\t}>;\n\tsignPersonalMessage(\n\t\tmessageInput: SuiSignPersonalMessageInput,\n\t): Promise<{ bytes: string; signature: string }>;\n\tsignTransactionBlock(transactionInput: SuiSignTransactionBlockInput): Promise<{\n\t\ttransactionBlockBytes: string;\n\t\tsignature: string;\n\t}>;\n\t/**\n\t * Suggest a transaction for the user to sign. Supports all valid transaction types.\n\t */\n\tsignAndExecuteTransactionBlock(\n\t\ttransactionInput: SuiSignAndExecuteTransactionBlockInput,\n\t): Promise<SuiTransactionBlockResponse>;\n\n\tgetAccounts: () => Promise<readonly WalletAccount[]>;\n}\n\ntype WalletAdapterProviderUnsubscribe = () => void;\n\n/**\n * An interface that can dynamically provide wallet adapters. This is useful for\n * cases where the list of wallet adapters is dynamic.\n */\nexport interface WalletAdapterProvider {\n\t/** Get a list of wallet adapters from this provider. */\n\tget(): WalletAdapter[];\n\t/** Detect changes to the list of wallet adapters. */\n\ton(eventName: 'changed', callback: () => void): WalletAdapterProviderUnsubscribe;\n}\n\nexport type WalletAdapterOrProvider = WalletAdapterProvider | WalletAdapter;\nexport type WalletAdapterList = WalletAdapterOrProvider[];\n\nexport function isWalletAdapter(wallet: WalletAdapterOrProvider): wallet is WalletAdapter {\n\treturn 'connect' in wallet;\n}\n\nexport function isWalletProvider(wallet: WalletAdapterOrProvider): wallet is WalletAdapterProvider {\n\treturn !isWalletAdapter(wallet);\n}\n\n/**\n * Takes an array of wallet adapters and providers, and resolves it to a\n * flat list of wallet adapters.\n */\nexport function resolveAdapters(adapterAndProviders: WalletAdapterList) {\n\treturn adapterAndProviders.flatMap((adapter) => {\n\t\tif (isWalletProvider(adapter)) {\n\t\t\treturn adapter.get();\n\t\t}\n\n\t\treturn adapter;\n\t});\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoEO,SAAS,gBAAgB,QAA0D;AACzF,SAAO,aAAa;AACrB;AAEO,SAAS,iBAAiB,QAAkE;AAClG,SAAO,CAAC,gBAAgB,MAAM;AAC/B;AAMO,SAAS,gBAAgB,qBAAwC;AACvE,SAAO,oBAAoB,QAAQ,CAAC,YAAY;AAC/C,QAAI,iBAAiB,OAAO,GAAG;AAC9B,aAAO,QAAQ,IAAI;AAAA,IACpB;AAEA,WAAO;AAAA,EACR,CAAC;AACF;","names":[]}