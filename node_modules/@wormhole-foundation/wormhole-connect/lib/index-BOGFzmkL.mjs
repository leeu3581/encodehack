var A = Object.defineProperty;
var B = (d, e, s) => e in d ? A(d, e, { enumerable: !0, configurable: !0, writable: !0, value: s }) : d[e] = s;
var o = (d, e, s) => B(d, typeof e != "symbol" ? e + "" : e, s);
import { N as g, l as p, O as w, P as u } from "./chunk-IMTC3J2M-ldki5kWL.mjs";
import { cn as S, bs as I, bq as U, bz as D, r as f, br as l, bt as T, bf as R } from "./index-CGIqRhuR.mjs";
import { A as E } from "./aptos-D3MPi63x.mjs";
import { A as $ } from "./unsignedTransaction-BDOQhqcZ.mjs";
const N = [
  [
    "Mainnet",
    {
      depositForBurn: "0xa11ceb0b0700000a0701000802080e031614042a04052e30075e870108e5014000000001000201030004000001050701000100060b0001070304010801020805060108010309080900010002010205060c030e05050208000b010108020108020105010b0101090003060c0b01010900030108000004060c08000e0501030e66756e6769626c655f6173736574066f626a656374167072696d6172795f66756e6769626c655f73746f72650f746f6b656e5f6d657373656e6765720d46756e6769626c654173736574064f626a656374084d6574616461746111616464726573735f746f5f6f626a656374087769746864726177106465706f7369745f666f725f6275726e00000000000000000000000000000000000000000000000000000000000000019bce6734f7b63e835108e3bd8c36743d4709fe435f44791918801d0989640a9d0000010f0b0438000c060a000b060b0138010c050b000b050b020b0311020102",
      handleReceiveMessage: "0xa11ceb0b0700000a0601000402040403080c051416072a53087d40000001010002000000030203000101040304000103060c0a020a020003060c060a02060a020108000101136d6573736167655f7472616e736d69747465720f746f6b656e5f6d657373656e67657207526563656970740f726563656976655f6d6573736167651668616e646c655f726563656976655f6d657373616765177e17751820e4b4371873ca8c30279be63bdea63b88ed0f2239c2eea10f17729bce6734f7b63e835108e3bd8c36743d4709fe435f44791918801d0989640a9d000001070b000e010e02110011010102"
    }
  ],
  [
    "Testnet",
    {
      depositForBurn: "0xa11ceb0b0700000a0701000802080e031614042a04052e30075e870108e5014000000001000201030004000001050701000100060b0001070304010801020805060108010309080900010002010205060c030e05050208000b010108020108020105010b0101090003060c0b01010900030108000004060c08000e0501030e66756e6769626c655f6173736574066f626a656374167072696d6172795f66756e6769626c655f73746f72650f746f6b656e5f6d657373656e6765720d46756e6769626c654173736574064f626a656374084d6574616461746111616464726573735f746f5f6f626a656374087769746864726177106465706f7369745f666f725f6275726e00000000000000000000000000000000000000000000000000000000000000015f9b937419dda90aa06c1836b7847f65bbbe3f1217567758dc2488be31a477b90000010f0b0438000c060a000b060b0138010c050b000b050b020b0311020102",
      handleReceiveMessage: "0xa11ceb0b0700000a0601000402040403080c051416072a53087d40000001010002000000030203000101040304000103060c0a020a020003060c060a02060a020108000101136d6573736167655f7472616e736d69747465720f746f6b656e5f6d657373656e67657207526563656970740f726563656976655f6d6573736167651668616e646c655f726563656976655f6d657373616765081e86cebf457a0c6004f35bd648a2794698f52e0dde09a48619dcd3d4cc23d95f9b937419dda90aa06c1836b7847f65bbbe3f1217567758dc2488be31a477b9000001070b000e010e02110011010102"
    }
  ]
], v = S(N, [0, 1]);
class b {
  constructor(e, s, n, t) {
    o(this, "network");
    o(this, "chain");
    o(this, "provider");
    o(this, "contracts");
    o(this, "usdcId");
    o(this, "tokenMessengerId");
    o(this, "messageTransmitterId");
    o(this, "moveScripts");
    var a, i, c;
    if (this.network = e, this.chain = s, this.provider = n, this.contracts = t, e === "Devnet")
      throw new Error("CircleBridge not supported on Devnet");
    const r = I.get(this.network, this.chain);
    if (!r)
      throw new Error(`No USDC contract configured for network=${this.network} chain=${this.chain}`);
    if (!((a = t.cctp) != null && a.tokenMessenger))
      throw new Error(`Circle Token Messenger contract for domain ${s} not found`);
    if (!((i = t.cctp) != null && i.messageTransmitter))
      throw new Error(`Circle Message Transmitter contract for domain ${s} not found`);
    if (!v.has(e))
      throw new Error("No Aptos CCTP move scripts found");
    this.usdcId = r, this.tokenMessengerId = (c = t.cctp) == null ? void 0 : c.tokenMessenger, this.messageTransmitterId = t.cctp.messageTransmitter, this.moveScripts = v.get(e);
  }
  async *transfer(e, s, n) {
    const t = new g(U.get(this.network, s.chain)), r = p.from(this.usdcId), a = p.from(s.address.toUniversalAddress().toUint8Array()), i = [new w(n), t, a, r], c = {
      bytecode: this.moveScripts.depositForBurn,
      functionArguments: i
    };
    yield this.createUnsignedTx(c, "Aptos.CircleBridge.Transfer");
  }
  async isTransferCompleted(e) {
    const s = new g(e.sourceDomain).bcsToBytes(), n = new w(e.nonce).bcsToBytes(), t = D(new Uint8Array([...s, 45, ...n])), r = f.encode(t);
    return (await this.provider.view({
      payload: {
        function: `${this.messageTransmitterId}::message_transmitter::is_nonce_used`,
        functionArguments: [r]
      }
    }))[0];
  }
  async *redeem(e, s, n) {
    const t = [
      u.U8(l.serialize(s)),
      u.U8(f.decode(n))
    ], r = {
      bytecode: this.moveScripts.handleReceiveMessage,
      functionArguments: t
    };
    yield this.createUnsignedTx(r, "Aptos.CircleBridge.Redeem");
  }
  async parseTransactionDetails(e) {
    var m;
    const s = await this.provider.getTransactionByHash({ transactionHash: e }), n = this.messageTransmitterId.replace(/^0x0+/, "0x"), t = (m = s.events) == null ? void 0 : m.find((x) => x.type === `${n}::message_transmitter::MessageSent`);
    if (!t)
      throw new Error("No MessageSent event found");
    const r = f.decode(t.data.message), [a, i] = l.deserialize(r), { payload: c } = a, C = c.messageSender, k = c.mintRecipient, h = T(this.network, a.sourceDomain), y = T(this.network, a.destinationDomain), M = { chain: h, address: c.burnToken };
    return {
      from: { chain: h, address: C },
      to: { chain: y, address: k },
      token: M,
      amount: c.amount,
      message: a,
      id: { hash: i }
    };
  }
  static async fromRpc(e, s) {
    const [n, t] = await E.chainFromRpc(e), r = s[t];
    if (r.network !== n)
      throw new Error(`Network mismatch: ${r.network} != ${n}`);
    return new b(n, t, e, r.contracts);
  }
  createUnsignedTx(e, s, n = !1) {
    return new $(e, this.network, this.chain, s, n);
  }
}
R("Aptos", "CircleBridge", b);
export {
  b as AptosCircleBridge
};
