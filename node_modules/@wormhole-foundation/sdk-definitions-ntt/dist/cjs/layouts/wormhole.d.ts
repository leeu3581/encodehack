import type { CustomizableBytes, LayoutToType } from "@wormhole-foundation/sdk-base";
export type WormholeTransceiverMessage<MP extends CustomizableBytes = undefined> = LayoutToType<ReturnType<typeof wormholeTransceiverMessageLayout<MP>>>;
export declare const wormholeTransceiverMessageLayout: <MP extends CustomizableBytes = undefined>(nttManagerPayload?: MP) => readonly [{
    readonly name: "prefix";
    readonly binary: "bytes";
    readonly custom: Uint8Array;
    readonly omit: true;
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("@wormhole-foundation/sdk-definitions").UniversalAddress;
        from: (val: import("@wormhole-foundation/sdk-definitions").UniversalAddress) => Uint8Array;
    };
    readonly name: "sourceNttManager";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("@wormhole-foundation/sdk-definitions").UniversalAddress;
        from: (val: import("@wormhole-foundation/sdk-definitions").UniversalAddress) => Uint8Array;
    };
    readonly name: "recipientNttManager";
}, import("@wormhole-foundation/sdk-base").CustomizableBytesReturn<{
    readonly name: "nttManagerPayload";
    readonly lengthSize: 2;
}, MP>, import("@wormhole-foundation/sdk-base").CustomizableBytesReturn<{
    readonly name: "transceiverPayload";
    readonly lengthSize: 2;
}, Uint8Array>];
//# sourceMappingURL=wormhole.d.ts.map