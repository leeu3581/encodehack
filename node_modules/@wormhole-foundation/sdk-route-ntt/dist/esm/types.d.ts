import { Chain, ChainAddress, ChainContext, Network, TokenId, VAA, WormholeMessageId, TransferReceipt as _TransferReceipt, amount, routes } from "@wormhole-foundation/sdk-connect";
import { Ntt } from "@wormhole-foundation/sdk-definitions-ntt";
export declare namespace NttRoute {
    type TransceiverType = "wormhole";
    const TRIMMED_DECIMALS = 8;
    type TransceiverConfig = {
        type: TransceiverType;
        address: string;
    };
    type TokenConfig = {
        chain: Chain;
        token: string;
        manager: string;
        transceiver: TransceiverConfig[];
        quoter?: string;
        isWrappedGasToken?: boolean;
    };
    type Config = {
        tokens: Record<string, TokenConfig[]>;
    };
    /** Options for Per-TransferRequest settings */
    interface Options {
        automatic: boolean;
        gasDropoff?: string;
    }
    const ManualOptions: Options;
    const AutomaticOptions: Options;
    type NormalizedParams = {
        amount: amount.Amount;
        options: Ntt.TransferOptions;
        sourceContracts: Ntt.Contracts;
        destinationContracts: Ntt.Contracts;
    };
    interface ValidatedParams extends routes.ValidatedTransferParams<Options> {
        normalizedParams: NormalizedParams;
    }
    type ManualAttestationReceipt = {
        id: WormholeMessageId;
        attestation: VAA<"Ntt:WormholeTransfer">;
    };
    type AutomaticAttestationReceipt = {
        id: WormholeMessageId;
        attestation: VAA<"Ntt:WormholeTransfer"> | VAA<"Ntt:WormholeTransferStandardRelayer">;
    };
    type ManualTransferReceipt<SC extends Chain = Chain, DC extends Chain = Chain> = _TransferReceipt<ManualAttestationReceipt, SC, DC> & {
        params: ValidatedParams;
    };
    type AutomaticTransferReceipt<SC extends Chain = Chain, DC extends Chain = Chain> = _TransferReceipt<AutomaticAttestationReceipt, SC, DC> & {
        params: ValidatedParams;
    };
    function resolveSupportedNetworks(config: Config): Network[];
    function resolveSupportedChains(config: Config, network: Network): Chain[];
    function resolveSourceTokens(config: Config, fromChain: ChainContext<Network>): TokenId[];
    function resolveDestinationTokens(config: Config, sourceToken: TokenId, fromChain: ChainContext<Network>, toChain: ChainContext<Network>): TokenId[];
    function resolveNttContracts(config: Config, srcToken: TokenId, dstToken: TokenId): {
        srcContracts: Ntt.Contracts;
        dstContracts: Ntt.Contracts;
    };
    function resolveDestinationNttContracts<C extends Chain>(config: Config, srcManager: ChainAddress<C>, dstChain: Chain): Ntt.Contracts;
    function isCapacityThresholdExceeded(amount: bigint, capacity: bigint): boolean;
    function trimAmount(amt: amount.Amount, dstTokenDecimals: number): amount.Amount;
}
//# sourceMappingURL=types.d.ts.map