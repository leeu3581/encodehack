/// <reference types="bn.js" />
import { BN } from "@coral-xyz/anchor";
import { PublicKey, PublicKeyInitData } from "@solana/web3.js";
import { Chain, ChainId } from "@wormhole-foundation/sdk-base";
export declare const BPF_LOADER_UPGRADEABLE_PROGRAM_ID: PublicKey;
export declare function programDataAddress(programId: PublicKeyInitData): PublicKey;
export declare function parseVersion(version: string): [number, number, number, string];
export declare const pubKeyConversion: {
    readonly to: (encoded: Uint8Array) => PublicKey;
    readonly from: (decoded: PublicKey) => Uint8Array;
};
export declare const programDataLayout: readonly [{
    readonly name: "slot";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 8;
}, {
    readonly name: "upgradeAuthority";
    readonly binary: "switch";
    readonly idSize: 1;
    readonly idTag: "isSome";
    readonly layouts: readonly [readonly [readonly [0, false], readonly []], readonly [readonly [1, true], readonly [{
        readonly name: "value";
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            readonly to: (encoded: Uint8Array) => PublicKey;
            readonly from: (decoded: PublicKey) => Uint8Array;
        };
    }]]];
}];
export declare const programVersionLayout: readonly [{
    readonly name: "length";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 4;
}, {
    readonly name: "version";
    readonly binary: "bytes";
}];
export declare const U64: {
    MAX: BN;
    to: (amount: number, unit: number) => BN;
    from: (amount: BN, unit: number) => number;
};
type Seed = Uint8Array | string;
export declare function derivePda(seeds: Seed | readonly Seed[], programId: PublicKeyInitData): PublicKey;
export declare const chainToBytes: (chain: Chain | ChainId) => Uint8Array;
export declare const quoterAddresses: (programId: PublicKeyInitData) => {
    relayRequestAccount: (outboxItem: PublicKey) => PublicKey;
    instanceAccount: () => PublicKey;
    registeredChainAccount: (chain: Chain) => PublicKey;
    registeredNttAccount: (nttProgramId: PublicKey) => PublicKey;
};
export {};
//# sourceMappingURL=utils.d.ts.map