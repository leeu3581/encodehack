import { Connection, PublicKey, PublicKeyInitData } from "@solana/web3.js";
import { Chain } from "@wormhole-foundation/sdk-base";
import { quoterAddresses } from "./utils.js";
export declare const WEI_PER_GWEI = 1000000000;
export declare class NttQuoter {
    readonly instance: PublicKey;
    private readonly program;
    nttProgramId: PublicKey;
    pdas: ReturnType<typeof quoterAddresses>;
    constructor(connection: Connection, programId: PublicKeyInitData, nttProgramId: PublicKeyInitData);
    isRelayEnabled(destination: Chain): Promise<boolean>;
    calcRelayCostInSol(nttProgramId: PublicKey, chain: Chain, requestedGasDropoffEth: number): Promise<number>;
    /**
     * Estimate the cost of a relay request
     * @param chain The destination chain
     * @param gasDropoff The amount of native gas to end up with on the destination chain
     * @returns The estimated cost in lamports
     */
    quoteDeliveryPrice(chain: Chain, gasDropoff?: bigint): Promise<bigint>;
    createRequestRelayInstruction(payer: PublicKey, outboxItem: PublicKey, chain: Chain, maxFeeSol: number, gasDropoffEth: number): Promise<import("@solana/web3.js").TransactionInstruction>;
    getInstance(): Promise<{
        owner: PublicKey;
        assistant: PublicKey;
        feeRecipient: PublicKey;
        solPriceUsd: number;
    }>;
    getRegisteredChain(chain: Chain): Promise<{
        paused: boolean;
        maxGasDropoffEth: number;
        basePriceUsd: number;
        nativePriceUsd: number;
        gasPriceGwei: number;
    }>;
    getRegisteredNtt(nttProgramId: PublicKey): Promise<{
        gasCost: number;
        wormholeTransceiverIndex: number;
    }>;
    wasRelayRequested(outboxItem: PublicKey): Promise<number | null>;
    createInitalizeInstruction(feeRecipient: PublicKey): Promise<import("@solana/web3.js").TransactionInstruction>;
    createSetAssistantInstruction(assistant: PublicKey): Promise<import("@solana/web3.js").TransactionInstruction>;
    createSetFeeRecipientInstruction(feeRecipient: PublicKey): Promise<import("@solana/web3.js").TransactionInstruction>;
    createRegisterChainInstruction(authority: PublicKey, chain: Chain): Promise<import("@solana/web3.js").TransactionInstruction>;
    createRegisterNttInstruction(authority: PublicKey, nttProgramId: PublicKey, gasCost: number, wormholeTransceiverIndex: number): Promise<import("@solana/web3.js").TransactionInstruction>;
    createDeregisterNttInstruction(authority: PublicKey, nttProgramId: PublicKey): Promise<import("@solana/web3.js").TransactionInstruction>;
    createUpdateSolPriceInstruction(authority: PublicKey, solPriceUsd: number): Promise<import("@solana/web3.js").TransactionInstruction>;
    createUpdateChainParamsInstruction(authority: PublicKey, chain: Chain, maxGasDropoffEth: number, basePriceUsd: number): Promise<import("@solana/web3.js").TransactionInstruction>;
    createPauseRelayForChainInstruction(authority: PublicKey, chain: Chain): Promise<import("@solana/web3.js").TransactionInstruction>;
    createUpdateChainPricesInstruction(authority: PublicKey, chain: Chain, nativePriceUsd: number, gasPriceGwei: number): Promise<import("@solana/web3.js").TransactionInstruction>;
    createCloseRelayInstruction(authority: PublicKey, outboxItem: PublicKey): Promise<import("@solana/web3.js").TransactionInstruction>;
    private registeredChainPda;
    private registeredNttPda;
    private relayRequestPda;
}
//# sourceMappingURL=quoter.d.ts.map