"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQuoterProgram = exports.getTransceiverProgram = exports.getNttProgram = exports.IdlVersions = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const index_js_1 = require("./anchor-idl/index.js");
const sdk_definitions_ntt_1 = require("@wormhole-foundation/sdk-definitions-ntt");
// This is a descending list of all ABI versions the SDK is aware of.
// We check for the first match in descending order, allowing for higher minor and patch versions
// being used by the live contract (these are supposed to still be compatible with older ABIs).
exports.IdlVersions = [
    ["3.0.0", index_js_1._3_0_0],
    ["2.0.0", index_js_1._2_0_0],
    ["1.0.0", index_js_1._1_0_0],
];
function loadIdlVersion(targetVersion) {
    for (const [idlVersion, idl] of exports.IdlVersions) {
        if (sdk_definitions_ntt_1.Ntt.abiVersionMatches(targetVersion, idlVersion)) {
            return idl;
        }
    }
    throw new Error(`Unknown IDL version: ${targetVersion}`);
}
function getNttProgram(connection, address, version) {
    const { idl: { ntt }, } = loadIdlVersion(version);
    return new anchor_1.Program(ntt, address, {
        connection,
    });
}
exports.getNttProgram = getNttProgram;
function getTransceiverProgram(connection, address, version) {
    const { idl: { transceiver }, } = loadIdlVersion(version);
    return new anchor_1.Program(transceiver, address, {
        connection,
    });
}
exports.getTransceiverProgram = getTransceiverProgram;
function getQuoterProgram(connection, address, version) {
    const { idl: { quoter }, } = loadIdlVersion(version);
    return new anchor_1.Program(quoter, address, {
        connection,
    });
}
exports.getQuoterProgram = getQuoterProgram;
//# sourceMappingURL=bindings.js.map