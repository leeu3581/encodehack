"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NTT = void 0;
const anchor_1 = require("@coral-xyz/anchor");
const splToken = __importStar(require("@solana/spl-token"));
const web3_js_1 = require("@solana/web3.js");
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const sdk_definitions_1 = require("@wormhole-foundation/sdk-definitions");
const sdk_definitions_ntt_1 = require("@wormhole-foundation/sdk-definitions-ntt");
const spl_token_1 = require("@solana/spl-token");
const sdk_solana_core_1 = require("@wormhole-foundation/sdk-solana-core");
const bindings_js_1 = require("./bindings.js");
const utils_js_1 = require("./utils.js");
var NTT;
(function (NTT) {
    /** utility to create TransferArgs from SDK types */
    function transferArgs(amount, recipient, shouldQueue) {
        return {
            amount: new anchor_1.BN(amount.toString()),
            recipientChain: { id: (0, sdk_base_1.toChainId)(recipient.chain) },
            recipientAddress: Array.from(recipient.address.toUniversalAddress().toUint8Array()),
            shouldQueue: shouldQueue,
        };
    }
    NTT.transferArgs = transferArgs;
    /** pdas returns an object containing all functions to compute program addresses */
    NTT.pdas = (programId) => {
        const configAccount = () => (0, utils_js_1.derivePda)("config", programId);
        const inboxRateLimitAccount = (chain) => (0, utils_js_1.derivePda)(["inbox_rate_limit", (0, utils_js_1.chainToBytes)(chain)], programId);
        const inboxItemAccount = (chain, nttMessage) => (0, utils_js_1.derivePda)(["inbox_item", sdk_definitions_ntt_1.Ntt.messageDigest(chain, nttMessage)], programId);
        const outboxRateLimitAccount = () => (0, utils_js_1.derivePda)("outbox_rate_limit", programId);
        const tokenAuthority = () => (0, utils_js_1.derivePda)("token_authority", programId);
        const pendingTokenAuthority = () => (0, utils_js_1.derivePda)("pending_token_authority", programId);
        const peerAccount = (chain) => (0, utils_js_1.derivePda)(["peer", (0, utils_js_1.chainToBytes)(chain)], programId);
        const registeredTransceiver = (transceiver) => (0, utils_js_1.derivePda)(["registered_transceiver", transceiver.toBytes()], programId);
        const lutAccount = () => (0, utils_js_1.derivePda)("lut", programId);
        const lutAuthority = () => (0, utils_js_1.derivePda)("lut_authority", programId);
        const sessionAuthority = (sender, args) => (0, utils_js_1.derivePda)([
            "session_authority",
            sender.toBytes(),
            (0, sdk_definitions_1.keccak256)(sdk_base_1.encoding.bytes.concat(sdk_base_1.encoding.bytes.zpad(new Uint8Array(args.amount.toArray()), 8), (0, utils_js_1.chainToBytes)(args.recipientChain.id), new Uint8Array(args.recipientAddress), new Uint8Array([args.shouldQueue ? 1 : 0]))),
        ], programId);
        // TODO: memoize?
        return {
            configAccount,
            outboxRateLimitAccount,
            inboxRateLimitAccount,
            inboxItemAccount,
            sessionAuthority,
            tokenAuthority,
            pendingTokenAuthority,
            peerAccount,
            registeredTransceiver,
            lutAccount,
            lutAuthority,
        };
    };
    /** pdas returns an object containing all functions to compute program addresses */
    NTT.transceiverPdas = (programId) => {
        const emitterAccount = () => (0, utils_js_1.derivePda)("emitter", programId);
        const outboxItemSigner = () => (0, utils_js_1.derivePda)(["outbox_item_signer"], programId);
        const transceiverPeerAccount = (chain) => (0, utils_js_1.derivePda)(["transceiver_peer", (0, utils_js_1.chainToBytes)(chain)], programId);
        const transceiverMessageAccount = (chain, id) => (0, utils_js_1.derivePda)(["transceiver_message", (0, utils_js_1.chainToBytes)(chain), id], programId);
        const wormholeMessageAccount = (outboxItem) => (0, utils_js_1.derivePda)(["message", outboxItem.toBytes()], programId);
        // TODO: memoize?
        return {
            emitterAccount,
            outboxItemSigner,
            transceiverPeerAccount,
            transceiverMessageAccount,
            wormholeMessageAccount,
        };
    };
    async function getVersion(connection, programId, sender) {
        // the anchor library has a built-in method to read view functions. However,
        // it requires a signer, which would trigger a wallet prompt on the frontend.
        // Instead, we manually construct a versioned transaction and call the
        // simulate function with sigVerify: false below.
        //
        // This way, the simulation won't require a signer, but it still requires
        // the pubkey of an account that has some lamports in it (since the
        // simulation checks if the account has enough money to pay for the transaction).
        //
        // It's a little unfortunate but it's the best we can do.
        if (!sender) {
            const address = connection.rpcEndpoint === sdk_base_1.rpc.rpcAddress("Devnet", "Solana")
                ? "6sbzC1eH4FTujJXWj51eQe25cYvr4xfXbJ1vAj7j2k5J" // The CI pubkey, funded on ci network
                : connection.rpcEndpoint.startsWith("http://localhost")
                    ? "98evdAiWr7ey9MAQzoQQMwFQkTsSR6KkWQuFqKrgwNwb" // the anchor pubkey, funded on local network
                    : "Hk3SdYTJFpawrvRz4qRztuEt2SqoCG7BGj2yJfDJSFbJ"; // The default pubkey is funded on mainnet and devnet we need a funded account to simulate the transaction below
            sender = new web3_js_1.PublicKey(address);
        }
        const program = (0, bindings_js_1.getNttProgram)(connection, programId.toString(), "1.0.0");
        const ix = await program.methods.version().accountsStrict({}).instruction();
        // Since we don't need the very very very latest blockhash, using finalized
        // ensures the blockhash will be found when we immediately simulate the tx
        const { blockhash } = await program.provider.connection.getLatestBlockhash("finalized");
        const msg = new web3_js_1.TransactionMessage({
            payerKey: sender,
            recentBlockhash: blockhash,
            instructions: [ix],
        }).compileToV0Message();
        const tx = new web3_js_1.VersionedTransaction(msg);
        const txSimulation = await program.provider.connection.simulateTransaction(tx, { sigVerify: false });
        if (!txSimulation.value.returnData || txSimulation.value.err) {
            throw new Error("Could not fetch IDL version: " +
                JSON.stringify((0, anchor_1.translateError)(txSimulation.value.err, (0, anchor_1.parseIdlErrors)(program.idl))));
        }
        const data = sdk_base_1.encoding.b64.decode(txSimulation.value.returnData?.data[0]);
        const parsed = (0, sdk_base_1.deserializeLayout)(utils_js_1.programVersionLayout, data);
        const version = sdk_base_1.encoding.bytes.decode(parsed.version);
        for (const [idlVersion] of bindings_js_1.IdlVersions) {
            if (sdk_definitions_ntt_1.Ntt.abiVersionMatches(version, idlVersion)) {
                return idlVersion;
            }
        }
        throw new Error(`Unknown IDL version: ${version}`);
    }
    NTT.getVersion = getVersion;
    async function createInitializeInstruction(program, args, pdas) {
        const [major, , ,] = (0, utils_js_1.parseVersion)(program.idl.version);
        const mode = args.mode === "burning" ? { burning: {} } : { locking: {} };
        const chainId = (0, sdk_base_1.toChainId)(args.chain);
        pdas = pdas ?? NTT.pdas(program.programId);
        const limit = new anchor_1.BN(args.outboundLimit.toString());
        return program.methods
            .initialize({ chainId, limit: limit, mode })
            .accounts({
            payer: args.payer,
            deployer: args.owner,
            programData: (0, utils_js_1.programDataAddress)(program.programId),
            config: pdas.configAccount(),
            mint: args.mint,
            rateLimit: pdas.outboxRateLimitAccount(),
            tokenProgram: args.tokenProgram,
            tokenAuthority: pdas.tokenAuthority(),
            // NOTE: SPL Multisig token authority is only supported for versions >= 3.x.x
            ...(major >= 3 && {
                multisigTokenAuthority: args.multisigTokenAuthority ?? null,
            }),
            custody: await NTT.custodyAccountAddress(pdas, args.mint, args.tokenProgram),
            bpfLoaderUpgradeableProgram: utils_js_1.BPF_LOADER_UPGRADEABLE_PROGRAM_ID,
            associatedTokenProgram: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
            systemProgram: web3_js_1.SystemProgram.programId,
        })
            .instruction();
    }
    NTT.createInitializeInstruction = createInitializeInstruction;
    // This function should be called after each upgrade. If there's nothing to
    // do, it won't actually submit a transaction, so it's cheap to call.
    async function initializeOrUpdateLUT(program, config, whTransceiver, args, pdas) {
        // if the program is < major version 2.x.x, we don't need to initialize the LUT
        const [major, , ,] = (0, utils_js_1.parseVersion)(program.idl.version);
        if (major < 2)
            return;
        pdas = pdas ?? NTT.pdas(program.programId);
        // TODO: find a more robust way of fetching a recent slot
        const slot = (await program.provider.connection.getSlot()) - 1;
        const [_, lutAddress] = anchor_1.web3.AddressLookupTableProgram.createLookupTable({
            authority: pdas.lutAuthority(),
            payer: args.payer,
            recentSlot: slot,
        });
        const whAccs = sdk_solana_core_1.utils.getWormholeDerivedAccounts(whTransceiver, args.wormholeId.toString());
        // TODO: add `whAccs.emitter`, `whTransceiver`, and transceiverEmitter PDA account to LUT
        const entries = {
            config: pdas.configAccount(),
            custody: config.custody,
            tokenProgram: config.tokenProgram,
            mint: config.mint,
            tokenAuthority: pdas.tokenAuthority(),
            outboxRateLimit: pdas.outboxRateLimitAccount(),
            wormhole: {
                bridge: whAccs.wormholeBridge,
                feeCollector: whAccs.wormholeFeeCollector,
                sequence: whAccs.wormholeSequence,
                program: args.wormholeId,
                systemProgram: web3_js_1.SystemProgram.programId,
                clock: anchor_1.web3.SYSVAR_CLOCK_PUBKEY,
                rent: anchor_1.web3.SYSVAR_RENT_PUBKEY,
            },
        };
        // collect all pubkeys in entries recursively
        const collectPubkeys = (obj) => {
            const pubkeys = new Array();
            for (const key in obj) {
                const value = obj[key];
                if (value instanceof web3_js_1.PublicKey) {
                    pubkeys.push(value);
                }
                else if (typeof value === "object") {
                    pubkeys.push(...collectPubkeys(value));
                }
            }
            return pubkeys;
        };
        const pubkeys = collectPubkeys(entries).map((pk) => pk.toBase58());
        const existingLut = await getAddressLookupTable(program, pdas);
        if (existingLut !== null) {
            const existingPubkeys = existingLut.state.addresses?.map((a) => a.toBase58()) ?? [];
            // if pubkeys contains keys that are not in the existing LUT, we need to
            // add them to the LUT
            const missingPubkeys = pubkeys.filter((pk) => !existingPubkeys.includes(pk));
            if (missingPubkeys.length === 0) {
                return null;
            }
        }
        return program.methods
            .initializeLut(new anchor_1.BN(slot))
            .accountsStrict({
            payer: args.payer,
            authority: pdas.lutAuthority(),
            lutAddress,
            lut: pdas.lutAccount(),
            lutProgram: web3_js_1.AddressLookupTableProgram.programId,
            systemProgram: web3_js_1.SystemProgram.programId,
            entries,
        })
            .instruction();
    }
    NTT.initializeOrUpdateLUT = initializeOrUpdateLUT;
    async function createTransferBurnInstruction(program, config, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        const custody = await custodyAccountAddress(pdas, config);
        const recipientChain = (0, sdk_base_1.toChain)(args.transferArgs.recipientChain.id);
        const transferIx = await program.methods
            .transferBurn(args.transferArgs)
            .accountsStrict({
            common: {
                payer: args.payer,
                config: { config: pdas.configAccount() },
                mint: config.mint,
                from: args.from,
                tokenProgram: config.tokenProgram,
                outboxItem: args.outboxItem,
                outboxRateLimit: pdas.outboxRateLimitAccount(),
                systemProgram: web3_js_1.SystemProgram.programId,
                custody,
            },
            peer: pdas.peerAccount(recipientChain),
            inboxRateLimit: pdas.inboxRateLimitAccount(recipientChain),
            sessionAuthority: pdas.sessionAuthority(args.fromAuthority, args.transferArgs),
            tokenAuthority: pdas.tokenAuthority(),
        })
            .instruction();
        const mintInfo = await splToken.getMint(program.provider.connection, config.mint, undefined, config.tokenProgram);
        const transferHook = splToken.getTransferHook(mintInfo);
        if (transferHook) {
            const source = args.from;
            const mint = config.mint;
            const destination = await custodyAccountAddress(pdas, config);
            const owner = pdas.sessionAuthority(args.fromAuthority, args.transferArgs);
            await addExtraAccountMetasForExecute(program.provider.connection, transferIx, transferHook.programId, source, mint, destination, owner, 
            // TODO(csongor): compute the amount that's passed into transfer.
            // Leaving this 0 is fine unless the transfer hook accounts addresses
            // depend on the amount (which is unlikely).
            // If this turns out to be the case, the amount to put here is the
            // untrimmed amount after removing dust.
            0);
        }
        return transferIx;
    }
    NTT.createTransferBurnInstruction = createTransferBurnInstruction;
    /**
     * Creates a transfer_lock instruction. The `payer`, `fromAuthority`, and `outboxItem`
     * arguments must sign the transaction
     */
    async function createTransferLockInstruction(program, config, args, pdas) {
        if (config.paused)
            throw new Error("Contract is paused");
        pdas = pdas ?? NTT.pdas(program.programId);
        const chain = (0, sdk_base_1.toChain)(args.transferArgs.recipientChain.id);
        const custody = await custodyAccountAddress(pdas, config);
        const transferIx = await program.methods
            .transferLock(args.transferArgs)
            .accountsStrict({
            common: {
                payer: args.payer,
                config: { config: pdas.configAccount() },
                mint: config.mint,
                from: args.from,
                tokenProgram: config.tokenProgram,
                outboxItem: args.outboxItem,
                outboxRateLimit: pdas.outboxRateLimitAccount(),
                custody,
                systemProgram: web3_js_1.SystemProgram.programId,
            },
            peer: pdas.peerAccount(chain),
            inboxRateLimit: pdas.inboxRateLimitAccount(chain),
            sessionAuthority: pdas.sessionAuthority(args.fromAuthority, args.transferArgs),
            custody,
        })
            .instruction();
        const mintInfo = await splToken.getMint(program.provider.connection, config.mint, undefined, config.tokenProgram);
        const transferHook = splToken.getTransferHook(mintInfo);
        if (transferHook) {
            const source = args.from;
            const destination = await custodyAccountAddress(pdas, config);
            const owner = pdas.sessionAuthority(args.fromAuthority, args.transferArgs);
            await addExtraAccountMetasForExecute(program.provider.connection, transferIx, transferHook.programId, source, config.mint, destination, owner, 
            // TODO(csongor): compute the amount that's passed into transfer.
            // Leaving this 0 is fine unless the transfer hook accounts addresses
            // depend on the amount (which is unlikely).
            // If this turns out to be the case, the amount to put here is the
            // untrimmed amount after removing dust.
            0);
        }
        return transferIx;
    }
    NTT.createTransferLockInstruction = createTransferLockInstruction;
    // TODO: document that if recipient is provided, then the instruction can be
    // created before the inbox item is created (i.e. they can be put in the same tx)
    async function createReleaseInboundMintInstruction(program, config, args, pdas) {
        const [major, , ,] = (0, utils_js_1.parseVersion)(program.idl.version);
        pdas = pdas ?? NTT.pdas(program.programId);
        const mintInfo = await splToken.getMint(program.provider.connection, config.mint, undefined, config.tokenProgram);
        let multisigTokenAuthority = null;
        if (!mintInfo.mintAuthority?.equals(pdas.tokenAuthority())) {
            multisigTokenAuthority = mintInfo.mintAuthority;
        }
        const recipientAddress = args.recipient ??
            (await getInboxItem(program, args.chain, args.nttMessage))
                .recipientAddress;
        const transferIx = await program.methods
            .releaseInboundMint({
            // NOTE: `revertOnDelay` is used for versions < 3.x.x
            // For versions >= 3.x.x, `revertWhenNotReady` is used instead
            revertOnDelay: args.revertWhenNotReady,
            revertWhenNotReady: args.revertWhenNotReady,
        })
            .accounts({
            common: {
                payer: args.payer,
                config: { config: pdas.configAccount() },
                inboxItem: pdas.inboxItemAccount(args.chain, args.nttMessage),
                recipient: (0, spl_token_1.getAssociatedTokenAddressSync)(config.mint, recipientAddress, true, config.tokenProgram),
                mint: config.mint,
                tokenAuthority: pdas.tokenAuthority(),
                tokenProgram: config.tokenProgram,
                custody: await custodyAccountAddress(pdas, config),
            },
            // NOTE: SPL Multisig token authority is only supported for versions >= 3.x.x
            ...(major >= 3 && {
                multisigTokenAuthority,
            }),
        })
            .instruction();
        const transferHook = splToken.getTransferHook(mintInfo);
        if (transferHook) {
            const source = await custodyAccountAddress(pdas, config);
            const mint = config.mint;
            const destination = (0, spl_token_1.getAssociatedTokenAddressSync)(mint, recipientAddress, true, config.tokenProgram);
            const owner = pdas.tokenAuthority();
            await addExtraAccountMetasForExecute(program.provider.connection, transferIx, transferHook.programId, source, mint, destination, owner, 
            // TODO(csongor): compute the amount that's passed into transfer.
            // Leaving this 0 is fine unless the transfer hook accounts addresses
            // depend on the amount (which is unlikely).
            // If this turns out to be the case, the amount to put here is the
            // untrimmed amount after removing dust.
            0);
        }
        return transferIx;
    }
    NTT.createReleaseInboundMintInstruction = createReleaseInboundMintInstruction;
    async function createReleaseInboundUnlockInstruction(program, config, args, pdas) {
        const recipientAddress = args.recipient ??
            (await NTT.getInboxItem(program, args.chain, args.nttMessage))
                .recipientAddress;
        pdas = pdas ?? NTT.pdas(program.programId);
        const custody = await custodyAccountAddress(pdas, config);
        const transferIx = await program.methods
            .releaseInboundUnlock({
            // NOTE: `revertOnDelay` is used for versions < 3.x.x
            // For versions >= 3.x.x, `revertWhenNotReady` is used instead
            revertOnDelay: args.revertWhenNotReady,
            revertWhenNotReady: args.revertWhenNotReady,
        })
            .accountsStrict({
            common: {
                payer: args.payer,
                config: { config: pdas.configAccount() },
                inboxItem: pdas.inboxItemAccount(args.chain, args.nttMessage),
                recipient: (0, spl_token_1.getAssociatedTokenAddressSync)(config.mint, recipientAddress, true, config.tokenProgram),
                mint: config.mint,
                tokenAuthority: pdas.tokenAuthority(),
                tokenProgram: config.tokenProgram,
                custody,
            },
            custody,
        })
            .instruction();
        const mintInfo = await splToken.getMint(program.provider.connection, config.mint, undefined, config.tokenProgram);
        const transferHook = splToken.getTransferHook(mintInfo);
        if (transferHook) {
            const source = await custodyAccountAddress(pdas, config);
            const mint = config.mint;
            const destination = (0, spl_token_1.getAssociatedTokenAddressSync)(mint, recipientAddress, true, config.tokenProgram);
            const owner = pdas.tokenAuthority();
            await addExtraAccountMetasForExecute(program.provider.connection, transferIx, transferHook.programId, source, mint, destination, owner, 
            // TODO(csongor): compute the amount that's passed into transfer.
            // Leaving this 0 is fine unless the transfer hook accounts addresses
            // depend on the amount (which is unlikely).
            // If this turns out to be the case, the amount to put here is the
            // untrimmed amount after removing dust.
            0);
        }
        return transferIx;
    }
    NTT.createReleaseInboundUnlockInstruction = createReleaseInboundUnlockInstruction;
    async function createTransferOwnershipInstruction(program, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .transferOwnership()
            .accounts({
            config: pdas.configAccount(),
            newOwner: args.newOwner,
        })
            .instruction();
    }
    NTT.createTransferOwnershipInstruction = createTransferOwnershipInstruction;
    async function createAcceptTokenAuthorityInstruction(program, config, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .acceptTokenAuthority()
            .accountsStrict({
            common: {
                config: pdas.configAccount(),
                mint: config.mint,
                tokenProgram: config.tokenProgram,
                tokenAuthority: pdas.tokenAuthority(),
                multisigTokenAuthority: args.multisigTokenAuthority ?? null,
            },
            currentAuthority: args.currentAuthority,
        })
            .instruction();
    }
    NTT.createAcceptTokenAuthorityInstruction = createAcceptTokenAuthorityInstruction;
    async function createAcceptTokenAuthorityFromMultisigInstruction(program, config, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .acceptTokenAuthorityFromMultisig()
            .accountsStrict({
            common: {
                config: pdas.configAccount(),
                mint: config.mint,
                tokenProgram: config.tokenProgram,
                tokenAuthority: pdas.tokenAuthority(),
                multisigTokenAuthority: args.multisigTokenAuthority ?? null,
            },
            currentMultisigAuthority: args.currentMultisigAuthority,
        })
            .remainingAccounts(args.additionalSigners.map((pubkey) => ({
            pubkey,
            isSigner: true,
            isWritable: false,
        })))
            .instruction();
    }
    NTT.createAcceptTokenAuthorityFromMultisigInstruction = createAcceptTokenAuthorityFromMultisigInstruction;
    async function createSetTokenAuthorityOneStepUncheckedInstruction(program, config, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .setTokenAuthorityOneStepUnchecked()
            .accountsStrict({
            common: {
                config: pdas.configAccount(),
                tokenAuthority: pdas.tokenAuthority(),
                mint: config.mint,
                owner: args.owner,
                newAuthority: args.newAuthority,
                multisigTokenAuthority: args.multisigTokenAuthority ?? null,
            },
            tokenProgram: config.tokenProgram,
        })
            .instruction();
    }
    NTT.createSetTokenAuthorityOneStepUncheckedInstruction = createSetTokenAuthorityOneStepUncheckedInstruction;
    async function createSetTokenAuthorityInstruction(program, config, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .setTokenAuthority()
            .accountsStrict({
            common: {
                config: pdas.configAccount(),
                tokenAuthority: pdas.tokenAuthority(),
                mint: config.mint,
                owner: args.owner,
                newAuthority: args.newAuthority,
                multisigTokenAuthority: args.multisigTokenAuthority ?? null,
            },
            rentPayer: args.rentPayer,
            pendingTokenAuthority: pdas.pendingTokenAuthority(),
            systemProgram: web3_js_1.SystemProgram.programId,
        })
            .instruction();
    }
    NTT.createSetTokenAuthorityInstruction = createSetTokenAuthorityInstruction;
    async function createRevertTokenAuthorityInstruction(program, config, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .revertTokenAuthority()
            .accountsStrict({
            common: {
                config: pdas.configAccount(),
                mint: config.mint,
                tokenAuthority: pdas.tokenAuthority(),
                tokenProgram: config.tokenProgram,
                systemProgram: web3_js_1.SystemProgram.programId,
                rentPayer: args.rentPayer,
                pendingTokenAuthority: pdas.pendingTokenAuthority(),
                multisigTokenAuthority: args.multisigTokenAuthority ?? null,
            },
            owner: args.owner,
        })
            .instruction();
    }
    NTT.createRevertTokenAuthorityInstruction = createRevertTokenAuthorityInstruction;
    async function createClaimTokenAuthorityInstruction(program, config, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .claimTokenAuthority()
            .accountsStrict({
            common: {
                config: pdas.configAccount(),
                mint: config.mint,
                tokenAuthority: pdas.tokenAuthority(),
                tokenProgram: config.tokenProgram,
                systemProgram: web3_js_1.SystemProgram.programId,
                rentPayer: args.rentPayer,
                pendingTokenAuthority: pdas.pendingTokenAuthority(),
                multisigTokenAuthority: args.multisigTokenAuthority ?? null,
            },
            newAuthority: args.newAuthority,
        })
            .instruction();
    }
    NTT.createClaimTokenAuthorityInstruction = createClaimTokenAuthorityInstruction;
    async function createClaimTokenAuthorityToMultisigInstruction(program, config, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .claimTokenAuthorityToMultisig()
            .accountsStrict({
            common: {
                config: pdas.configAccount(),
                mint: config.mint,
                tokenAuthority: pdas.tokenAuthority(),
                tokenProgram: config.tokenProgram,
                systemProgram: web3_js_1.SystemProgram.programId,
                rentPayer: args.rentPayer,
                pendingTokenAuthority: pdas.pendingTokenAuthority(),
                multisigTokenAuthority: args.multisigTokenAuthority ?? null,
            },
            newMultisigAuthority: args.newMultisigAuthority,
        })
            .remainingAccounts(args.additionalSigners.map((pubkey) => ({
            pubkey,
            isSigner: true,
            isWritable: false,
        })))
            .instruction();
    }
    NTT.createClaimTokenAuthorityToMultisigInstruction = createClaimTokenAuthorityToMultisigInstruction;
    async function createSetPeerInstruction(program, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .setPeer({
            chainId: { id: (0, sdk_base_1.toChainId)(args.chain) },
            address: Array.from(args.address),
            limit: args.limit,
            tokenDecimals: args.tokenDecimals,
        })
            .accounts({
            payer: args.payer,
            owner: args.owner,
            config: pdas.configAccount(),
            peer: pdas.peerAccount(args.chain),
            inboxRateLimit: pdas.inboxRateLimitAccount(args.chain),
        })
            .instruction();
    }
    NTT.createSetPeerInstruction = createSetPeerInstruction;
    // TODO: untested
    async function createSetPausedInstruction(program, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .setPaused(args.paused)
            .accountsStrict({
            owner: args.owner,
            config: pdas.configAccount(),
        })
            .instruction();
    }
    NTT.createSetPausedInstruction = createSetPausedInstruction;
    async function createSetThresholdInstruction(program, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .setThreshold(args.threshold)
            .accountsStrict({
            owner: args.owner,
            config: pdas.configAccount(),
        })
            .instruction();
    }
    NTT.createSetThresholdInstruction = createSetThresholdInstruction;
    async function createSetOutboundLimitInstruction(program, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .setOutboundLimit({
            limit: args.limit,
        })
            .accounts({
            owner: args.owner,
            config: pdas.configAccount(),
            rateLimit: pdas.outboxRateLimitAccount(),
        })
            .instruction();
    }
    NTT.createSetOutboundLimitInstruction = createSetOutboundLimitInstruction;
    async function setInboundLimit(program, args, pdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        return program.methods
            .setInboundLimit({
            chainId: { id: (0, sdk_base_1.toChainId)(args.chain) },
            limit: args.limit,
        })
            .accounts({
            owner: args.owner,
            config: pdas.configAccount(),
            rateLimit: pdas.inboxRateLimitAccount(args.chain),
        })
            .instruction();
    }
    NTT.setInboundLimit = setInboundLimit;
    async function createRedeemInstruction(program, config, transceiverProgramId, args, pdas, transceiverPdas) {
        pdas = pdas ?? NTT.pdas(program.programId);
        transceiverPdas =
            transceiverPdas ?? NTT.transceiverPdas(transceiverProgramId);
        const wormholeNTT = args.vaa;
        const nttMessage = wormholeNTT.payload.nttManagerPayload;
        const chain = wormholeNTT.emitterChain;
        return program.methods
            .redeem({})
            .accounts({
            payer: args.payer,
            config: pdas.configAccount(),
            peer: pdas.peerAccount(chain),
            transceiverMessage: transceiverPdas.transceiverMessageAccount(chain, nttMessage.id),
            transceiver: pdas.registeredTransceiver(transceiverProgramId),
            mint: config.mint,
            inboxItem: pdas.inboxItemAccount(chain, nttMessage),
            inboxRateLimit: pdas.inboxRateLimitAccount(chain),
            outboxRateLimit: pdas.outboxRateLimitAccount(),
        })
            .instruction();
    }
    NTT.createRedeemInstruction = createRedeemInstruction;
    // Account access
    /**
     * Fetches the Config account from the contract.
     *
     * @param config If provided, the config is just returned without making a
     *               network request. This is handy in case multiple config
     *               accessor functions are used, the config can just be queried
     *               once and passed around.
     */
    async function getConfig(program, pdas) {
        return program.account.config.fetch(pdas.configAccount());
    }
    NTT.getConfig = getConfig;
    async function getInboxItem(program, fromChain, nttMessage) {
        return program.account.inboxItem.fetch(NTT.pdas(program.programId).inboxItemAccount(fromChain, nttMessage));
    }
    NTT.getInboxItem = getInboxItem;
    async function getAddressLookupTable(program, pdas) {
        const [major, , ,] = (0, utils_js_1.parseVersion)(program.idl.version);
        if (major < 2)
            return null;
        pdas = pdas ?? NTT.pdas(program.programId);
        // @ts-ignore
        // NOTE: lut is 'LUT' in the IDL, but 'lut' in the generated code
        // It needs to be upper-cased in the IDL to compute the anchor
        // account discriminator correctly
        const lut = await program.account.lut.fetchNullable(pdas.lutAccount());
        if (!lut)
            return null;
        const response = await program.provider.connection.getAddressLookupTable(lut.address);
        if (response.value === null)
            throw new Error("Could not fetch LUT");
        return response.value;
    }
    NTT.getAddressLookupTable = getAddressLookupTable;
    /**
     * Returns the address of the custody account. If the config is available
     * (i.e. the program is initialised), the mint is derived from the config.
     * Otherwise, the mint must be provided.
     */
    async function custodyAccountAddress(pdas, configOrMint, tokenProgram = splToken.TOKEN_PROGRAM_ID) {
        if (configOrMint instanceof web3_js_1.PublicKey) {
            return splToken.getAssociatedTokenAddress(configOrMint, pdas.tokenAuthority(), true, tokenProgram);
        }
        else {
            return splToken.getAssociatedTokenAddress(configOrMint.mint, pdas.tokenAuthority(), true, configOrMint.tokenProgram);
        }
    }
    NTT.custodyAccountAddress = custodyAccountAddress;
})(NTT || (exports.NTT = NTT = {}));
/**
 * TODO: this is copied from @solana/spl-token, because the most recent released
 * version (0.4.3) is broken (does object equality instead of structural on the pubkey)
 *
 * this version fixes that error, looks like it's also fixed on main:
 * https://github.com/solana-labs/solana-program-library/blob/ad4eb6914c5e4288ad845f29f0003cd3b16243e7/token/js/src/extensions/transferHook/instructions.ts#L208
 */
async function addExtraAccountMetasForExecute(connection, instruction, programId, source, mint, destination, owner, amount, commitment) {
    const validateStatePubkey = splToken.getExtraAccountMetaAddress(mint, programId);
    const validateStateAccount = await connection.getAccountInfo(validateStatePubkey, commitment);
    if (validateStateAccount == null) {
        return instruction;
    }
    const validateStateData = splToken.getExtraAccountMetas(validateStateAccount);
    // Check to make sure the provided keys are in the instruction
    if (![source, mint, destination, owner].every((key) => instruction.keys.some((meta) => meta.pubkey.equals(key)))) {
        throw new Error("Missing required account in instruction");
    }
    const executeInstruction = splToken.createExecuteInstruction(programId, source, mint, destination, owner, validateStatePubkey, BigInt(amount));
    for (const extraAccountMeta of validateStateData) {
        executeInstruction.keys.push(deEscalateAccountMeta(await splToken.resolveExtraAccountMeta(connection, extraAccountMeta, executeInstruction.keys, executeInstruction.data, executeInstruction.programId), executeInstruction.keys));
    }
    // Add only the extra accounts resolved from the validation state
    instruction.keys.push(...executeInstruction.keys.slice(5));
    // Add the transfer hook program ID and the validation state account
    instruction.keys.push({
        pubkey: programId,
        isSigner: false,
        isWritable: false,
    });
    instruction.keys.push({
        pubkey: validateStatePubkey,
        isSigner: false,
        isWritable: false,
    });
}
// TODO: delete (see above)
function deEscalateAccountMeta(accountMeta, accountMetas) {
    const maybeHighestPrivileges = accountMetas
        .filter((x) => x.pubkey.equals(accountMeta.pubkey))
        .reduce((acc, x) => {
        if (!acc)
            return { isSigner: x.isSigner, isWritable: x.isWritable };
        return {
            isSigner: acc.isSigner || x.isSigner,
            isWritable: acc.isWritable || x.isWritable,
        };
    }, undefined);
    if (maybeHighestPrivileges) {
        const { isSigner, isWritable } = maybeHighestPrivileges;
        if (!isSigner && isSigner !== accountMeta.isSigner) {
            accountMeta.isSigner = false;
        }
        if (!isWritable && isWritable !== accountMeta.isWritable) {
            accountMeta.isWritable = false;
        }
    }
    return accountMeta;
}
//# sourceMappingURL=ntt.js.map