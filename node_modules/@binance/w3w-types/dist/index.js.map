{"version":3,"sources":["../src/jsonrpc.ts","../src/session.ts"],"names":["IEvents","__publicField","IBaseJsonRpcProvider","IJsonRpcProvider","DisconnectType"],"mappings":"wKA8DO,IAAeA,EAAf,KAAuB,CAAvB,cACLC,EAAA,eAOF,EASsBC,EAAf,cAA4CF,CAAQ,CAgB3D,EACsBG,EAAf,cAAwCD,CAAqB,CAA7D,kCACLD,EAAA,mBAeF,EChFO,IAAKG,OACVA,IAAA,mBAAqB,GAArB,qBACAA,IAAA,mBAAqB,GAArB,qBACAA,IAAA,aAAe,GAAf,eAHUA,OAAA","sourcesContent":["import EventEmitter from 'eventemitter3'\n\nimport { RequestArguments } from './helper'\nimport { Maybe, Any } from './shared'\n\nexport type JsonRpcVersion = '2.0'\nexport type JsonRpcId = number // Actually: number | string | null\n\nexport interface ErrorResponse {\n  code: number\n  message: string\n  data?: string\n}\n\nexport interface JsonRpcRequest<Method = string, Params = Any> {\n  jsonrpc: JsonRpcVersion\n  method: Method\n  id: JsonRpcId\n  params: Params extends undefined ? [] : Params\n}\n\ninterface JsonRpcResponseBase {\n  jsonrpc: JsonRpcVersion\n  id: JsonRpcId\n}\n\nexport interface JsonRpcSuccess<T = Any> extends JsonRpcResponseBase {\n  result: Maybe<T>\n}\nexport interface JsonRpcFailure extends JsonRpcResponseBase {\n  error: ErrorResponse\n}\n\nexport type JsonRpcResponse<T = any> = JsonRpcSuccess<T> | JsonRpcFailure\n\nexport interface JsonRpcProviderMessage<T = any> {\n  type: string\n  data: T\n}\n\nexport type JsonRpcPayload<P = any, R = any> =\n  | JsonRpcRequest<P>\n  | JsonRpcResponse<R>\n\nexport interface JsonRpcValidationResult {\n  valid: boolean\n  error?: string\n}\n\nexport interface JsonRpcValidationValid extends JsonRpcValidationResult {\n  valid: true\n}\n\nexport interface JsonRpcValidationInvalid extends JsonRpcValidationResult {\n  valid: false\n  error: string\n}\n\nexport type JsonRpcValidation =\n  | JsonRpcValidationValid\n  | JsonRpcValidationInvalid\n\nexport abstract class IEvents {\n  events: EventEmitter\n\n  // events\n  abstract on(event: string, listener: any): void\n  abstract once(event: string, listener: any): void\n  abstract off(event: string, listener: any): void\n  abstract removeListener(event: string, listener: any): void\n}\n\nexport interface IJsonRpcConnection extends IEvents {\n  connected: boolean\n  connecting: boolean\n  open(opts?: any): Promise<void>\n  close(): Promise<void>\n  send(payload: JsonRpcPayload, context?: any): Promise<void>\n}\nexport abstract class IBaseJsonRpcProvider extends IEvents {\n  public abstract connect(params?: any): Promise<void>\n\n  public abstract disconnect(): Promise<void>\n\n  public abstract request<Result = any, Params = any>(\n    request: RequestArguments<Params>,\n    context?: any\n  ): Promise<Result>\n\n  // ---------- Protected ----------------------------------------------- //\n\n  protected abstract requestStrict<Result = any, Params = any>(\n    request: JsonRpcRequest<Params>,\n    context?: any\n  ): Promise<Result>\n}\nexport abstract class IJsonRpcProvider extends IBaseJsonRpcProvider {\n  connection: IJsonRpcConnection\n\n  public abstract connect(\n    connection?: string | IJsonRpcConnection\n  ): Promise<void>\n\n  // ---------- Protected ----------------------------------------------- //\n\n  protected abstract onPayload(payload: JsonRpcPayload): void\n\n  protected abstract open(\n    connection?: string | IJsonRpcConnection\n  ): Promise<void>\n\n  protected abstract close(): Promise<void>\n}\n","import { ClientMetadata } from './metadata'\n\nexport interface EncryptionPayload {\n  data: string\n  hmac: string\n  iv: string\n}\n\nexport interface SessionParams {\n  approved: boolean\n  chainId: number | null\n  networkId: number | null\n  accounts: string[] | null\n  rpcUrl?: string | null\n  peerId?: string | null\n  peerMeta?: ClientMetadata | null\n}\n\nexport interface Session {\n  connected: boolean\n  accounts: string[]\n  chainId: string\n  relay: string\n  key: string\n  clientId: string\n  clientMeta: ClientMetadata | null\n  peerId: string\n  peerMeta: ClientMetadata | null\n  handshakeId: number\n  handshakeTopic: string\n}\n\nexport enum DisconnectType {\n  DisconnectAtWallet = 0,\n  DisconnectAtClient = 1,\n  NetworkError = 2,\n}\n"]}