import { JsonRpcRequest, JsonRpcSuccess } from './jsonrpc'
import { ValueOf } from './shared'

type Address = string // 20 Bytes - address
type Message = string // message to sign
export type SignedSignature = string
type ChainIdHex = string // A 0x-prefixed hexadecimal string

export interface EthTransaction {
  from: string
  to: string
  gas?: string
  gasPrice?: string
  maxFeePergas?: string
  maxPriorityFeePergas?: string
  value?: string
  data: string
  nonce?: string
}

type SignedTransaction = string // The signed transaction data.
type TransactionHash = string // 32 Bytes - the transaction hash, or the zero hash if the transaction is not yet available.
export interface AddEthereumChainParameter {
  chainId: ChainIdHex
  chainName: string
  nativeCurrency: {
    name: string
    symbol: string // 2-6 characters long
    decimals: number
  }
  rpcUrls: string[]
  blockExplorerUrls?: string[]
  iconUrls?: string[] // Currently ignored.
}
export interface SwitchEthereumChainParameter {
  chainId: ChainIdHex
}
interface WatchAssetParameter {
  type: 'ERC20' // In the future, other standards will be supported
  options: {
    address: string // The address of the token contract
  }
}

export type PublicEthMethod =
  | 'eth_coinbase'
  | 'net_version'
  | 'eth_call'
  | 'eth_newFilter'
  | 'eth_newBlockFilter'
  | 'eth_newPendingTransactionFilter'
  | 'eth_uninstallFilter'
  | 'eth_gasPrice'
  | 'eth_estimateGas'
  | 'eth_getTransactionCount'

export type PrivateEthMethod =
  | 'eth_requestAccounts'
  | 'eth_accounts'
  | 'eth_chainId'
  | 'eth_signTransaction'
  | 'eth_sendTransaction'
  | 'eth_sign'
  | 'personal_sign'
  | 'eth_signTypedData'
  | 'eth_signTypedData_v1'
  | 'eth_signTypedData_v2'
  | 'eth_signTypedData_v3'
  | 'eth_signTypedData_v4'
  | 'wallet_switchEthereumChain'
  | 'wallet_watchAsset'

interface PrivateJsonRpc<Method extends PrivateEthMethod, Params, Result> {
  request: JsonRpcRequest<Method, Params>
  response: JsonRpcSuccess<Result>
}

export type PrivateEthJsonRpc = {
  // https://docs.metamask.io/guide/rpc-api.html#eth_requestAccounts
  eth_requestAccounts: PrivateJsonRpc<'eth_requestAccounts', [], Address[]>
  // https://eth.wiki/json-rpc/API#eth_accounts
  eth_accounts: PrivateJsonRpc<'eth_accounts', [], Address[]>
  eth_chainId: PrivateJsonRpc<'eth_chainId', [], ChainIdHex>
  // https://eth.wiki/json-rpc/API#eth_signTransaction
  eth_signTransaction: PrivateJsonRpc<
    'eth_signTransaction',
    [EthTransaction],
    SignedTransaction
  >
  // https://eth.wiki/json-rpc/API#eth_sendTransaction
  eth_sendTransaction: PrivateJsonRpc<
    'eth_sendTransaction',
    [EthTransaction],
    TransactionHash
  >
  // https://eth.wiki/json-rpc/API#eth_sign
  eth_sign: PrivateJsonRpc<'eth_sign', [Address, Message], SignedSignature>
  personal_sign: PrivateJsonRpc<
    'personal_sign',
    [Message, Address],
    SignedSignature
  >
  eth_signTypedData: PrivateJsonRpc<
    'eth_signTypedData',
    [Address, string],
    SignedSignature
  >
  eth_signTypedData_v1: PrivateJsonRpc<
    'eth_signTypedData_v1',
    [Address, string],
    SignedSignature
  >
  eth_signTypedData_v2: PrivateJsonRpc<
    'eth_signTypedData_v2',
    [Address, string],
    SignedSignature
  >
  eth_signTypedData_v3: PrivateJsonRpc<
    'eth_signTypedData_v3',
    [Address, string],
    SignedSignature
  >
  eth_signTypedData_v4: PrivateJsonRpc<
    'eth_signTypedData_v4',
    [Address, string],
    SignedSignature
  >
  // // https://docs.metamask.io/guide/rpc-api.html#wallet-addethereumchain
  // wallet_addEthereumChain: PrivateJsonRpc<
  //   'wallet_addEthereumChain',
  //   [AddEthereumChainParameter],
  //   null
  // >
  wallet_switchEthereumChain: PrivateJsonRpc<
    'wallet_switchEthereumChain',
    [SwitchEthereumChainParameter],
    null
  >
  // https://docs.metamask.io/guide/rpc-api.html#wallet-watchasset
  wallet_watchAsset: PrivateJsonRpc<
    'wallet_watchAsset',
    WatchAssetParameter,
    boolean
  >
}

export type PrivateEthJsonRpcValue = ValueOf<PrivateEthJsonRpc>
