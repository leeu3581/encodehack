import { Core } from '@binance/w3w-core'
import { PrivateEthJsonRpc, DisconnectType } from '@binance/w3w-types'
import { Events } from '@binance/w3w-utils'

export class SignClient extends Events {
  public accounts: string[] = []

  public coreConnection: Core | null

  constructor() {
    super()

    this.register()
  }

  get chainId(): string {
    return this.coreConnection ? this.coreConnection.chainId : '0x0'
  }

  get connected(): boolean {
    return this.coreConnection ? this.coreConnection.connected : false
  }

  get connecting(): boolean {
    return this.coreConnection ? this.coreConnection.pending : false
  }

  public async open({
    requestChainId,
    lng,
    showQrCodeModal,
  }: {
    requestChainId?: string
    lng?: string
    showQrCodeModal?: boolean
  }): Promise<void> {
    this.register()

    if (this.coreConnection.connected) {
      return
    }

    const { accounts } = await this.coreConnection.connect({
      chainId: requestChainId,
      lng,
      showQrCodeModal,
    })
    this.accounts = accounts
  }

  public async request<T extends keyof PrivateEthJsonRpc>(
    payload: PrivateEthJsonRpc[T]['request']
  ): Promise<PrivateEthJsonRpc[T]['response']['result']> {
    if (!this.connected) {
      await this.open({})
    }

    return this.coreConnection.request(payload)
  }

  public disconnect() {
    if (!this.connected) {
      return
    }

    this.coreConnection.killSession()
    this.onClose(DisconnectType.DisconnectAtClient)
  }

  private register() {
    if (this.coreConnection) return this.coreConnection

    this.coreConnection = new Core()
    this.accounts = this.coreConnection.accounts

    this.subscribeEvents()
  }

  private subscribeEvents() {
    this.coreConnection.on('chainChanged', (nextChainId: string) => {
      this.events.emit('chainChanged', nextChainId)
    })

    this.coreConnection.on('accountsChanged', (nextAddress: string[]) => {
      this.accounts = nextAddress
      this.events.emit('accountsChanged', nextAddress)
    })
    this.coreConnection.on('uri_ready', (uri: string) => {
      this.events.emit('uri_ready', uri)
    })
    this.coreConnection.on('disconnect', (type: DisconnectType) => {
      this.onClose(type)
    })
  }

  private onClose(type: DisconnectType) {
    this.coreConnection = null

    // disconnect reason
    this.events.emit('disconnect', type)
  }
}
