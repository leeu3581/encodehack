{"version":3,"sources":["../src/index.ts"],"names":["Core","DisconnectType","Events","SignClient","__publicField","requestChainId","lng","showQrCodeModal","accounts","payload","nextChainId","nextAddress","uri","type"],"mappings":"wKAAA,OAAS,QAAAA,MAAY,oBACrB,OAA4B,kBAAAC,MAAsB,qBAClD,OAAS,UAAAC,MAAc,qBAEhB,IAAMC,EAAN,cAAyBD,CAAO,CAKrC,aAAc,CACZ,MAAM,EALRE,EAAA,KAAO,WAAqB,CAAC,GAE7BA,EAAA,KAAO,kBAKL,KAAK,SAAS,CAChB,CAEA,IAAI,SAAkB,CACpB,OAAO,KAAK,eAAiB,KAAK,eAAe,QAAU,KAC7D,CAEA,IAAI,WAAqB,CACvB,OAAO,KAAK,eAAiB,KAAK,eAAe,UAAY,EAC/D,CAEA,IAAI,YAAsB,CACxB,OAAO,KAAK,eAAiB,KAAK,eAAe,QAAU,EAC7D,CAEA,MAAa,KAAK,CAChB,eAAAC,EACA,IAAAC,EACA,gBAAAC,CACF,EAIkB,CAGhB,GAFA,KAAK,SAAS,EAEV,KAAK,eAAe,UACtB,OAGF,GAAM,CAAE,SAAAC,CAAS,EAAI,MAAM,KAAK,eAAe,QAAQ,CACrD,QAASH,EACT,IAAAC,EACA,gBAAAC,CACF,CAAC,EACD,KAAK,SAAWC,CAClB,CAEA,MAAa,QACXC,EACqD,CACrD,OAAK,KAAK,WACR,MAAM,KAAK,KAAK,CAAC,CAAC,EAGb,KAAK,eAAe,QAAQA,CAAO,CAC5C,CAEO,YAAa,CACb,KAAK,YAIV,KAAK,eAAe,YAAY,EAChC,KAAK,QAAQR,EAAe,kBAAkB,EAChD,CAEQ,UAAW,CACjB,GAAI,KAAK,eAAgB,OAAO,KAAK,eAErC,KAAK,eAAiB,IAAID,EAC1B,KAAK,SAAW,KAAK,eAAe,SAEpC,KAAK,gBAAgB,CACvB,CAEQ,iBAAkB,CACxB,KAAK,eAAe,GAAG,eAAiBU,GAAwB,CAC9D,KAAK,OAAO,KAAK,eAAgBA,CAAW,CAC9C,CAAC,EAED,KAAK,eAAe,GAAG,kBAAoBC,GAA0B,CACnE,KAAK,SAAWA,EAChB,KAAK,OAAO,KAAK,kBAAmBA,CAAW,CACjD,CAAC,EACD,KAAK,eAAe,GAAG,YAAcC,GAAgB,CACnD,KAAK,OAAO,KAAK,YAAaA,CAAG,CACnC,CAAC,EACD,KAAK,eAAe,GAAG,aAAeC,GAAyB,CAC7D,KAAK,QAAQA,CAAI,CACnB,CAAC,CACH,CAEQ,QAAQA,EAAsB,CACpC,KAAK,eAAiB,KAGtB,KAAK,OAAO,KAAK,aAAcA,CAAI,CACrC,CACF","sourcesContent":["import { Core } from '@binance/w3w-core'\nimport { PrivateEthJsonRpc, DisconnectType } from '@binance/w3w-types'\nimport { Events } from '@binance/w3w-utils'\n\nexport class SignClient extends Events {\n  public accounts: string[] = []\n\n  public coreConnection: Core | null\n\n  constructor() {\n    super()\n\n    this.register()\n  }\n\n  get chainId(): string {\n    return this.coreConnection ? this.coreConnection.chainId : '0x0'\n  }\n\n  get connected(): boolean {\n    return this.coreConnection ? this.coreConnection.connected : false\n  }\n\n  get connecting(): boolean {\n    return this.coreConnection ? this.coreConnection.pending : false\n  }\n\n  public async open({\n    requestChainId,\n    lng,\n    showQrCodeModal,\n  }: {\n    requestChainId?: string\n    lng?: string\n    showQrCodeModal?: boolean\n  }): Promise<void> {\n    this.register()\n\n    if (this.coreConnection.connected) {\n      return\n    }\n\n    const { accounts } = await this.coreConnection.connect({\n      chainId: requestChainId,\n      lng,\n      showQrCodeModal,\n    })\n    this.accounts = accounts\n  }\n\n  public async request<T extends keyof PrivateEthJsonRpc>(\n    payload: PrivateEthJsonRpc[T]['request']\n  ): Promise<PrivateEthJsonRpc[T]['response']['result']> {\n    if (!this.connected) {\n      await this.open({})\n    }\n\n    return this.coreConnection.request(payload)\n  }\n\n  public disconnect() {\n    if (!this.connected) {\n      return\n    }\n\n    this.coreConnection.killSession()\n    this.onClose(DisconnectType.DisconnectAtClient)\n  }\n\n  private register() {\n    if (this.coreConnection) return this.coreConnection\n\n    this.coreConnection = new Core()\n    this.accounts = this.coreConnection.accounts\n\n    this.subscribeEvents()\n  }\n\n  private subscribeEvents() {\n    this.coreConnection.on('chainChanged', (nextChainId: string) => {\n      this.events.emit('chainChanged', nextChainId)\n    })\n\n    this.coreConnection.on('accountsChanged', (nextAddress: string[]) => {\n      this.accounts = nextAddress\n      this.events.emit('accountsChanged', nextAddress)\n    })\n    this.coreConnection.on('uri_ready', (uri: string) => {\n      this.events.emit('uri_ready', uri)\n    })\n    this.coreConnection.on('disconnect', (type: DisconnectType) => {\n      this.onClose(type)\n    })\n  }\n\n  private onClose(type: DisconnectType) {\n    this.coreConnection = null\n\n    // disconnect reason\n    this.events.emit('disconnect', type)\n  }\n}\n"]}