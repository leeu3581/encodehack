import { Session, ClientMetadata, Any, PrivateEthJsonRpc } from '@binance/w3w-types';
import { Events } from '@binance/w3w-utils';

type JsonRpcCallback = (error: Error | null, response: Any) => void;
declare class BaseCore extends Events {
    pending: boolean;
    protected callbacks: Map<string, JsonRpcCallback>;
    protected clientMeta: ClientMetadata;
    protected relay: string;
    protected _key: ArrayBuffer | null;
    protected _clientId: string;
    protected _peerId: string;
    protected _peerMeta: ClientMetadata | null;
    protected _handshakeId: number;
    protected _handshakeTopic: string;
    protected _connected: boolean;
    protected _accounts: string[];
    protected _chainId: string;
    set key(value: string);
    get key(): string;
    set clientId(value: string);
    get clientId(): string;
    set peerId(value: string);
    get peerId(): string;
    set peerMeta(value: ClientMetadata);
    get peerMeta(): ClientMetadata;
    set handshakeTopic(value: string);
    get handshakeTopic(): string;
    set handshakeId(value: number);
    get handshakeId(): number;
    get uri(): string;
    set chainId(value: string);
    get chainId(): string;
    set accounts(value: string[]);
    get accounts(): string[];
    set connected(_: boolean);
    get connected(): boolean;
    get session(): {
        connected: boolean;
        accounts: string[];
        chainId: string;
        relay: string;
        key: string;
        clientId: string;
        clientMeta: ClientMetadata;
        peerId: string;
        peerMeta: ClientMetadata;
        handshakeId: number;
        handshakeTopic: string;
    };
    set session(value: {
        connected: boolean;
        accounts: string[];
        chainId: string;
        relay: string;
        key: string;
        clientId: string;
        clientMeta: ClientMetadata;
        peerId: string;
        peerMeta: ClientMetadata;
        handshakeId: number;
        handshakeTopic: string;
    });
}
declare class SessionManage extends BaseCore {
    protected getStorageSession(): Session;
    protected setStorageSession(): void;
    protected removeStorageSession(): void;
    protected manageStorageSession(): void;
}

declare class Core extends SessionManage {
    private transport;
    private lng?;
    constructor();
    request<T extends keyof PrivateEthJsonRpc>(payload: Partial<PrivateEthJsonRpc[T]['request']>): Promise<PrivateEthJsonRpc[T]['response']['result']>;
    killSession(): void;
    connect({ chainId, lng, showQrCodeModal, }?: {
        chainId?: string;
        lng?: string;
        showQrCodeModal?: boolean;
    }): Promise<{
        chainId: string;
        accounts: string[];
    }>;
    createSession({ chainId, showQrCodeModal, }: {
        chainId?: string;
        showQrCodeModal?: boolean;
    }): void;
    private initTransport;
    /**
     * @dev Set incoming socket message to js
     */
    private setIncomingMessages;
    private encrypt;
    private decrypt;
    private sendRequest;
    private subscribeInternalEvent;
    private subscribeToSessionResponse;
    private handleSessionResponse;
    private handleRejectSessionConnection;
    private handleSessionDisconnect;
    private clearConnectionStatus;
    private offConnectEvents;
    private setChainId;
    private setAddress;
}

export { Core };
