{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import {\n  ExecuteTransactionRequestType,\n  SuiTransactionBlockResponseOptions,\n} from '@mysten/sui.js/client'\nimport { TransactionBlock } from '@mysten/sui.js/transactions'\nimport { fromB64, toB64 } from '@mysten/sui.js/utils'\nimport {\n  SuiSignAndExecuteTransactionBlockInput,\n  SuiSignPersonalMessageInput,\n  SuiSignTransactionBlockInput,\n  WalletAccount,\n  WalletIcon,\n} from '@mysten/wallet-standard'\nimport {\n  Infer,\n  Describe,\n  array,\n  object,\n  optional,\n  string,\n  boolean,\n  literal,\n  union,\n} from 'superstruct'\n\nexport { is, validate } from 'superstruct'\n\n/**\n * Passing in objects directly to the Snap sometimes doesn't work correctly so we need to serialize to primitive values\n * and then deserialize on the other side.\n */\n\n/* ======== SerializedWalletAccount ======== */\n\nexport const SerializedWalletAccount = object({\n  address: string(),\n  publicKey: string(),\n  chains: array(string()),\n  features: array(string()),\n  label: optional(string()),\n  icon: optional(string()),\n})\n\nexport type SerializedWalletAccount = Infer<typeof SerializedWalletAccount>\n\nexport function serializeWalletAccount(account: WalletAccount): SerializedWalletAccount {\n  return {\n    address: account.address,\n    publicKey: toB64(account.publicKey),\n    features: [...account.features],\n    chains: [...account.chains],\n    label: account.label,\n    icon: account.icon,\n  }\n}\n\nexport function deserializeWalletAccount(account: SerializedWalletAccount): WalletAccount {\n  return {\n    address: account.address,\n    publicKey: fromB64(account.publicKey),\n    chains: account.chains.map(chain => chain as `${string}:${string}`),\n    features: account.features.map(feature => feature as `${string}:${string}`),\n    label: account.label,\n    icon: account.icon as WalletIcon,\n  }\n}\n\n/* ======== SerializedSuiSignMessageInput ======== */\n\nexport const SerializedSuiSignPersonalMessageInput = object({\n  message: string(),\n  account: SerializedWalletAccount,\n})\n\nexport type SerializedSuiSignMessageInput = Infer<typeof SerializedSuiSignPersonalMessageInput>\n\nexport function serializeSuiSignMessageInput(\n  input: SuiSignPersonalMessageInput\n): SerializedSuiSignMessageInput {\n  return {\n    message: toB64(input.message),\n    account: serializeWalletAccount(input.account),\n  }\n}\n\nexport function deserializeSuiSignMessageInput(\n  input: SerializedSuiSignMessageInput\n): SuiSignPersonalMessageInput {\n  return {\n    message: fromB64(input.message),\n    account: deserializeWalletAccount(input.account),\n  }\n}\n\n/* ======== SerializedSuiSignTransactionBlockInput ======== */\n\nexport const SerializedSuiSignTransactionBlockInput = object({\n  transactionBlock: string(),\n  account: SerializedWalletAccount,\n  chain: string(),\n})\n\nexport type SerializedSuiSignTransactionBlockInput = Infer<\n  typeof SerializedSuiSignTransactionBlockInput\n>\n\nexport function serializeSuiSignTransactionBlockInput(\n  input: SuiSignTransactionBlockInput\n): SerializedSuiSignTransactionBlockInput {\n  return {\n    transactionBlock: input.transactionBlock.serialize(),\n    account: serializeWalletAccount(input.account),\n    chain: input.chain,\n  }\n}\n\nexport function deserializeSuiSignTransactionBlockInput(\n  input: SerializedSuiSignTransactionBlockInput\n): SuiSignTransactionBlockInput {\n  return {\n    transactionBlock: TransactionBlock.from(input.transactionBlock),\n    account: deserializeWalletAccount(input.account),\n    chain: input.chain as `${string}:${string}`,\n  }\n}\n\n/* ======== SerializedSuiSignAndExecuteTransactionBlockInput ======== */\n\nconst SuiTransactionBlockResponseOptions: Describe<SuiTransactionBlockResponseOptions> = object({\n  showBalanceChanges: optional(boolean()),\n  showEffects: optional(boolean()),\n  showEvents: optional(boolean()),\n  showInput: optional(boolean()),\n  showObjectChanges: optional(boolean()),\n  showRawInput: optional(boolean()),\n})\n\nexport const SerializedSuiSignAndExecuteTransactionBlockInput = object({\n  transactionBlock: string(),\n  account: SerializedWalletAccount,\n  chain: string(),\n  requestType: optional(string()),\n  options: optional(SuiTransactionBlockResponseOptions),\n})\n\nexport type SerializedSuiSignAndExecuteTransactionBlockInput = Infer<\n  typeof SerializedSuiSignAndExecuteTransactionBlockInput\n>\n\nexport function serializeSuiSignAndExecuteTransactionBlockInput(\n  input: SuiSignAndExecuteTransactionBlockInput\n): SerializedSuiSignAndExecuteTransactionBlockInput {\n  return {\n    transactionBlock: input.transactionBlock.serialize(),\n    account: serializeWalletAccount(input.account),\n    chain: input.chain,\n    requestType: input.requestType,\n    options: input.options,\n  }\n}\n\nexport function deserializeSuiSignAndExecuteTransactionBlockInput(\n  input: SerializedSuiSignAndExecuteTransactionBlockInput\n): SuiSignAndExecuteTransactionBlockInput {\n  return {\n    ...input,\n    transactionBlock: TransactionBlock.from(input.transactionBlock),\n    account: deserializeWalletAccount(input.account),\n    chain: input.chain as `${string}:${string}`,\n    requestType: input.requestType as ExecuteTransactionRequestType | undefined,\n  }\n}\n\n/* ======== StoredState ======== */\n\nexport interface StoredState {\n  mainnetUrl: string\n  testnetUrl: string\n  devnetUrl: string\n  localnetUrl: string\n}\n\n/* ======== SerializedAdminSetFullnodeUrl ======== */\n\nexport const SerializedAdminSetFullnodeUrl = object({\n  network: union([literal('mainnet'), literal('testnet'), literal('devnet'), literal('localnet')]),\n  url: string(),\n})\n\nexport type SerializedAdminSetFullnodeUrl = Infer<typeof SerializedAdminSetFullnodeUrl>\n"],"mappings":"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","names":["import_superstruct"]}