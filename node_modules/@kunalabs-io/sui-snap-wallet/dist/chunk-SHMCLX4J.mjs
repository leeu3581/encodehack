var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/types.ts
import { TransactionBlock } from "@mysten/sui.js/transactions";
import { fromB64, toB64 } from "@mysten/sui.js/utils";
import {
  array,
  object,
  optional,
  string,
  boolean,
  literal,
  union
} from "superstruct";
import { is, validate } from "superstruct";
var SerializedWalletAccount = object({
  address: string(),
  publicKey: string(),
  chains: array(string()),
  features: array(string()),
  label: optional(string()),
  icon: optional(string())
});
function serializeWalletAccount(account) {
  return {
    address: account.address,
    publicKey: toB64(account.publicKey),
    features: [...account.features],
    chains: [...account.chains],
    label: account.label,
    icon: account.icon
  };
}
function deserializeWalletAccount(account) {
  return {
    address: account.address,
    publicKey: fromB64(account.publicKey),
    chains: account.chains.map((chain) => chain),
    features: account.features.map((feature) => feature),
    label: account.label,
    icon: account.icon
  };
}
var SerializedSuiSignPersonalMessageInput = object({
  message: string(),
  account: SerializedWalletAccount
});
function serializeSuiSignMessageInput(input) {
  return {
    message: toB64(input.message),
    account: serializeWalletAccount(input.account)
  };
}
function deserializeSuiSignMessageInput(input) {
  return {
    message: fromB64(input.message),
    account: deserializeWalletAccount(input.account)
  };
}
var SerializedSuiSignTransactionBlockInput = object({
  transactionBlock: string(),
  account: SerializedWalletAccount,
  chain: string()
});
function serializeSuiSignTransactionBlockInput(input) {
  return {
    transactionBlock: input.transactionBlock.serialize(),
    account: serializeWalletAccount(input.account),
    chain: input.chain
  };
}
function deserializeSuiSignTransactionBlockInput(input) {
  return {
    transactionBlock: TransactionBlock.from(input.transactionBlock),
    account: deserializeWalletAccount(input.account),
    chain: input.chain
  };
}
var SuiTransactionBlockResponseOptions = object({
  showBalanceChanges: optional(boolean()),
  showEffects: optional(boolean()),
  showEvents: optional(boolean()),
  showInput: optional(boolean()),
  showObjectChanges: optional(boolean()),
  showRawInput: optional(boolean())
});
var SerializedSuiSignAndExecuteTransactionBlockInput = object({
  transactionBlock: string(),
  account: SerializedWalletAccount,
  chain: string(),
  requestType: optional(string()),
  options: optional(SuiTransactionBlockResponseOptions)
});
function serializeSuiSignAndExecuteTransactionBlockInput(input) {
  return {
    transactionBlock: input.transactionBlock.serialize(),
    account: serializeWalletAccount(input.account),
    chain: input.chain,
    requestType: input.requestType,
    options: input.options
  };
}
function deserializeSuiSignAndExecuteTransactionBlockInput(input) {
  return {
    ...input,
    transactionBlock: TransactionBlock.from(input.transactionBlock),
    account: deserializeWalletAccount(input.account),
    chain: input.chain,
    requestType: input.requestType
  };
}
var SerializedAdminSetFullnodeUrl = object({
  network: union([literal("mainnet"), literal("testnet"), literal("devnet"), literal("localnet")]),
  url: string()
});

export {
  __publicField,
  __privateGet,
  __privateAdd,
  __privateSet,
  SerializedWalletAccount,
  serializeWalletAccount,
  deserializeWalletAccount,
  SerializedSuiSignPersonalMessageInput,
  serializeSuiSignMessageInput,
  deserializeSuiSignMessageInput,
  SerializedSuiSignTransactionBlockInput,
  serializeSuiSignTransactionBlockInput,
  deserializeSuiSignTransactionBlockInput,
  SerializedSuiSignAndExecuteTransactionBlockInput,
  serializeSuiSignAndExecuteTransactionBlockInput,
  deserializeSuiSignAndExecuteTransactionBlockInput,
  SerializedAdminSetFullnodeUrl,
  is,
  validate
};
//# sourceMappingURL=chunk-SHMCLX4J.mjs.map