import { BaseProvider } from '@metamask/providers';
import { Describe } from 'superstruct';
import { Infer } from 'superstruct';
import { is } from 'superstruct';
import { ReadonlyWalletAccount } from '@mysten/wallet-standard';
import { StandardConnectFeature } from '@mysten/wallet-standard';
import { StandardDisconnectFeature } from '@mysten/wallet-standard';
import { StandardEventsFeature } from '@mysten/wallet-standard';
import { Struct } from 'superstruct';
import { SuiFeatures } from '@mysten/wallet-standard';
import { SuiSignAndExecuteTransactionBlockInput } from '@mysten/wallet-standard';
import { SuiSignAndExecuteTransactionBlockOutput } from '@mysten/wallet-standard';
import { SuiSignMessageInput } from '@mysten/wallet-standard';
import { SuiSignMessageOutput } from '@mysten/wallet-standard';
import { SuiSignPersonalMessageInput } from '@mysten/wallet-standard';
import { SuiSignPersonalMessageOutput } from '@mysten/wallet-standard';
import { SuiSignTransactionBlockInput } from '@mysten/wallet-standard';
import { SuiSignTransactionBlockOutput } from '@mysten/wallet-standard';
import { SuiTransactionBlockResponseOptions } from '@mysten/sui.js/client';
import { validate } from 'superstruct';
import { Wallet } from '@mysten/wallet-standard';
import { WalletAccount } from '@mysten/wallet-standard';

export declare function admin_getStoredState(provider: BaseProvider): Promise<StoredState>;

export declare function admin_setFullnodeUrl(provider: BaseProvider, network: 'mainnet' | 'testnet' | 'devnet' | 'localnet', url: string): Promise<void>;

declare function convertError(error: unknown): unknown;
export { convertError }
export { convertError as convertError_alias_1 }

declare function deserializeSuiSignAndExecuteTransactionBlockInput(input: SerializedSuiSignAndExecuteTransactionBlockInput): SuiSignAndExecuteTransactionBlockInput;
export { deserializeSuiSignAndExecuteTransactionBlockInput }
export { deserializeSuiSignAndExecuteTransactionBlockInput as deserializeSuiSignAndExecuteTransactionBlockInput_alias_1 }

declare function deserializeSuiSignMessageInput(input: SerializedSuiSignMessageInput): SuiSignPersonalMessageInput;
export { deserializeSuiSignMessageInput }
export { deserializeSuiSignMessageInput as deserializeSuiSignMessageInput_alias_1 }

declare function deserializeSuiSignTransactionBlockInput(input: SerializedSuiSignTransactionBlockInput): SuiSignTransactionBlockInput;
export { deserializeSuiSignTransactionBlockInput }
export { deserializeSuiSignTransactionBlockInput as deserializeSuiSignTransactionBlockInput_alias_1 }

declare function deserializeWalletAccount(account: SerializedWalletAccount): WalletAccount;
export { deserializeWalletAccount }
export { deserializeWalletAccount as deserializeWalletAccount_alias_1 }

declare class DryRunFailedError extends Error {
    static readonly type = "DRY_RUN_FAILED";
    readonly type = "DRY_RUN_FAILED";
    constructor(message?: string);
    static asSimpleError(message?: string): Error;
    static isSimpleErrorMessage(message: string): boolean;
    static fromSimpleErrorMessage(message: string): DryRunFailedError;
}
export { DryRunFailedError }
export { DryRunFailedError as DryRunFailedError_alias_1 }

export declare function getAccounts(provider: BaseProvider): Promise<ReadonlyWalletAccount[]>;

export declare const ICON: `data:image/svg+xml;base64,${string}`;

declare class InvalidParamsError extends Error {
    static readonly type = "INVALID_REQUEST_PARAMS";
    readonly type = "INVALID_REQUEST_PARAMS";
    constructor(message: string);
    static asSimpleError(message: string): Error;
    static isSimpleErrorMessage(message: string): boolean;
    static fromSimpleErrorMessage(message: string): InvalidParamsError;
}
export { InvalidParamsError }
export { InvalidParamsError as InvalidParamsError_alias_1 }

declare class InvalidRequestMethodError extends Error {
    static readonly type = "INVALID_REQUEST_METHOD";
    readonly type = "INVALID_REQUEST_METHOD";
    constructor(method: string);
    static asSimpleError(method: string): Error;
    static isSimpleErrorMessage(message: string): boolean;
    static fromSimpleErrorMessage(message: string): InvalidRequestMethodError;
}
export { InvalidRequestMethodError }
export { InvalidRequestMethodError as InvalidRequestMethodError_alias_1 }

export { is }
export { is as is_alias_1 }

export declare function metaMaskAvailable(): Promise<MetaMaskStatus>;

export declare interface MetaMaskStatus {
    available: boolean;
    version?: string;
    supportsSnaps: boolean;
    suiSnapInstalled: boolean;
}

declare class NonAdminOrigin extends Error {
    static readonly type = "NON_ADMIN_ORIGIN";
    readonly type = "USER_REJECTION";
    constructor();
    static asSimpleError(): Error;
    static isSimpleErrorMessage(message: string): boolean;
}
export { NonAdminOrigin }
export { NonAdminOrigin as NonAdminOrigin_alias_1 }

export declare function registerSuiSnapWallet(): SuiSnapWallet;

declare const SerializedAdminSetFullnodeUrl: Struct<    {
network: "mainnet" | "testnet" | "devnet" | "localnet";
url: string;
}, {
network: Struct<"mainnet" | "testnet" | "devnet" | "localnet", null>;
url: Struct<string, null>;
}>;

declare type SerializedAdminSetFullnodeUrl = Infer<typeof SerializedAdminSetFullnodeUrl>;
export { SerializedAdminSetFullnodeUrl }
export { SerializedAdminSetFullnodeUrl as SerializedAdminSetFullnodeUrl_alias_1 }

declare const SerializedSuiSignAndExecuteTransactionBlockInput: Struct<    {
account: {
address: string;
publicKey: string;
chains: string[];
features: string[];
label?: string | undefined;
icon?: string | undefined;
};
transactionBlock: string;
chain: string;
requestType?: string | undefined;
options?: SuiTransactionBlockResponseOptions | undefined;
}, {
transactionBlock: Struct<string, null>;
account: Struct<    {
address: string;
publicKey: string;
chains: string[];
features: string[];
label?: string | undefined;
icon?: string | undefined;
}, {
address: Struct<string, null>;
publicKey: Struct<string, null>;
chains: Struct<string[], Struct<string, null>>;
features: Struct<string[], Struct<string, null>>;
label: Struct<string | undefined, null>;
icon: Struct<string | undefined, null>;
}>;
chain: Struct<string, null>;
requestType: Struct<string | undefined, null>;
options: Struct<SuiTransactionBlockResponseOptions | undefined, {
showBalanceChanges?: Describe<boolean | undefined> | undefined;
showEffects?: Describe<boolean | undefined> | undefined;
showEvents?: Describe<boolean | undefined> | undefined;
showInput?: Describe<boolean | undefined> | undefined;
showObjectChanges?: Describe<boolean | undefined> | undefined;
showRawInput?: Describe<boolean | undefined> | undefined;
}>;
}>;

declare type SerializedSuiSignAndExecuteTransactionBlockInput = Infer<typeof SerializedSuiSignAndExecuteTransactionBlockInput>;
export { SerializedSuiSignAndExecuteTransactionBlockInput }
export { SerializedSuiSignAndExecuteTransactionBlockInput as SerializedSuiSignAndExecuteTransactionBlockInput_alias_1 }

declare type SerializedSuiSignMessageInput = Infer<typeof SerializedSuiSignPersonalMessageInput>;
export { SerializedSuiSignMessageInput }
export { SerializedSuiSignMessageInput as SerializedSuiSignMessageInput_alias_1 }

declare const SerializedSuiSignPersonalMessageInput: Struct<    {
message: string;
account: {
address: string;
publicKey: string;
chains: string[];
features: string[];
label?: string | undefined;
icon?: string | undefined;
};
}, {
message: Struct<string, null>;
account: Struct<    {
address: string;
publicKey: string;
chains: string[];
features: string[];
label?: string | undefined;
icon?: string | undefined;
}, {
address: Struct<string, null>;
publicKey: Struct<string, null>;
chains: Struct<string[], Struct<string, null>>;
features: Struct<string[], Struct<string, null>>;
label: Struct<string | undefined, null>;
icon: Struct<string | undefined, null>;
}>;
}>;
export { SerializedSuiSignPersonalMessageInput }
export { SerializedSuiSignPersonalMessageInput as SerializedSuiSignPersonalMessageInput_alias_1 }

declare const SerializedSuiSignTransactionBlockInput: Struct<    {
account: {
address: string;
publicKey: string;
chains: string[];
features: string[];
label?: string | undefined;
icon?: string | undefined;
};
transactionBlock: string;
chain: string;
}, {
transactionBlock: Struct<string, null>;
account: Struct<    {
address: string;
publicKey: string;
chains: string[];
features: string[];
label?: string | undefined;
icon?: string | undefined;
}, {
address: Struct<string, null>;
publicKey: Struct<string, null>;
chains: Struct<string[], Struct<string, null>>;
features: Struct<string[], Struct<string, null>>;
label: Struct<string | undefined, null>;
icon: Struct<string | undefined, null>;
}>;
chain: Struct<string, null>;
}>;

declare type SerializedSuiSignTransactionBlockInput = Infer<typeof SerializedSuiSignTransactionBlockInput>;
export { SerializedSuiSignTransactionBlockInput }
export { SerializedSuiSignTransactionBlockInput as SerializedSuiSignTransactionBlockInput_alias_1 }

/**
 * Passing in objects directly to the Snap sometimes doesn't work correctly so we need to serialize to primitive values
 * and then deserialize on the other side.
 */
declare const SerializedWalletAccount: Struct<    {
address: string;
publicKey: string;
chains: string[];
features: string[];
label?: string | undefined;
icon?: string | undefined;
}, {
address: Struct<string, null>;
publicKey: Struct<string, null>;
chains: Struct<string[], Struct<string, null>>;
features: Struct<string[], Struct<string, null>>;
label: Struct<string | undefined, null>;
icon: Struct<string | undefined, null>;
}>;

declare type SerializedWalletAccount = Infer<typeof SerializedWalletAccount>;
export { SerializedWalletAccount }
export { SerializedWalletAccount as SerializedWalletAccount_alias_1 }

declare function serializeSuiSignAndExecuteTransactionBlockInput(input: SuiSignAndExecuteTransactionBlockInput): SerializedSuiSignAndExecuteTransactionBlockInput;
export { serializeSuiSignAndExecuteTransactionBlockInput }
export { serializeSuiSignAndExecuteTransactionBlockInput as serializeSuiSignAndExecuteTransactionBlockInput_alias_1 }

declare function serializeSuiSignMessageInput(input: SuiSignPersonalMessageInput): SerializedSuiSignMessageInput;
export { serializeSuiSignMessageInput }
export { serializeSuiSignMessageInput as serializeSuiSignMessageInput_alias_1 }

declare function serializeSuiSignTransactionBlockInput(input: SuiSignTransactionBlockInput): SerializedSuiSignTransactionBlockInput;
export { serializeSuiSignTransactionBlockInput }
export { serializeSuiSignTransactionBlockInput as serializeSuiSignTransactionBlockInput_alias_1 }

declare function serializeWalletAccount(account: WalletAccount): SerializedWalletAccount;
export { serializeWalletAccount }
export { serializeWalletAccount as serializeWalletAccount_alias_1 }

export declare function signAndExecuteTransactionBlock(provider: BaseProvider, transactionInput: SuiSignTransactionBlockInput): Promise<SuiSignAndExecuteTransactionBlockOutput>;

export declare function signMessage(provider: BaseProvider, messageInput: SuiSignMessageInput): Promise<SuiSignMessageOutput>;

export declare function signPersonalMessage(provider: BaseProvider, messageInput: SuiSignPersonalMessageInput): Promise<SuiSignPersonalMessageOutput>;

export declare function signTransactionBlock(provider: BaseProvider, transactionInput: SuiSignTransactionBlockInput): Promise<SuiSignTransactionBlockOutput>;

export declare const SNAP_ORIGIN = "npm:@kunalabs-io/sui-metamask-snap";

export declare const SNAP_VERSION = "^1.0.0";

declare interface StoredState {
    mainnetUrl: string;
    testnetUrl: string;
    devnetUrl: string;
    localnetUrl: string;
}
export { StoredState }
export { StoredState as StoredState_alias_1 }

export declare class SuiSnapWallet implements Wallet {
    #private;
    static NAME: string;
    constructor();
    get version(): "1.0.0";
    get name(): string;
    get icon(): `data:image/svg+xml;base64,${string}`;
    get chains(): readonly ["sui:devnet", "sui:testnet", "sui:localnet", "sui:mainnet"];
    get connecting(): boolean;
    get accounts(): WalletAccount[];
    get features(): StandardConnectFeature & StandardDisconnectFeature & SuiFeatures & StandardEventsFeature;
}

declare class UserRejectionError extends Error {
    static readonly type = "USER_REJECTION";
    readonly type = "USER_REJECTION";
    constructor();
    static asSimpleError(): Error;
    static isSimpleErrorMessage(message: string): boolean;
}
export { UserRejectionError }
export { UserRejectionError as UserRejectionError_alias_1 }

export { validate }
export { validate as validate_alias_1 }

export { }
