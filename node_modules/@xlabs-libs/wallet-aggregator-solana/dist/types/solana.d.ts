import { WalletAdapter } from "@solana/wallet-adapter-base";
import { ConfirmOptions } from "@solana/web3.js";
import { Connection, Transaction, TransactionSignature } from "@solana/web3.js";
import { BaseFeatures, CHAIN_ID_SOLANA, ChainId, SendTransactionResult, Signature, Wallet, WalletState } from "@xlabs-libs/wallet-aggregator-core";
export interface SolanaAdapter extends WalletAdapter {
    signTransaction?<T extends Transaction>(transaction: T): Promise<T>;
    signAllTransactions?<T extends Transaction>(transactions: T[]): Promise<T[]>;
    signMessage?(message: Uint8Array): Promise<Uint8Array>;
}
export type SolanaUnsignedTransaction = Transaction | Transaction[];
export type SolanaSignedTransaction = Transaction | Transaction[];
export type SolanaSubmitTransactionResult = TransactionSignature | TransactionSignature[];
export type SolanaMessage = Uint8Array;
export interface SolanaNetworkInfo {
}
interface BaseSendOptions {
    options?: ConfirmOptions;
}
export interface SolanaSendTransactionParams extends BaseSendOptions {
    transaction: SolanaSignedTransaction;
}
export interface SolanaSignAndSendTransactionParams extends BaseSendOptions {
    transaction: SolanaUnsignedTransaction;
}
/**
 * An abstraction over Solana blockchain wallets.
 *
 * This class works as a wrapper over the adapters provided by the `@solana/wallet-adapter-base` library. In order to use this class, simply create the adapter you wish to use and pass it as a constructor parameter:
 *
 * ```ts
 * const connection = new Connection(url)
 * const martian = new SolanaWallet(
 *     new PhantomWalletAdapter(),
 *     connection
 * )
 * ```
 */
export declare class SolanaWallet extends Wallet<typeof CHAIN_ID_SOLANA, void, SolanaUnsignedTransaction, SolanaSignedTransaction, SolanaSendTransactionParams, SolanaSubmitTransactionResult, SolanaSendTransactionParams, SolanaSubmitTransactionResult, SolanaMessage, Signature, SolanaNetworkInfo> {
    private readonly adapter;
    private readonly connection;
    constructor(adapter: SolanaAdapter, connection: Connection);
    /** Retrieve the underlying solana adapter */
    getAdapter(): SolanaAdapter;
    getName(): string;
    getUrl(): string;
    connect(): Promise<string[]>;
    getNetworkInfo(): SolanaNetworkInfo | undefined;
    isConnected(): boolean;
    disconnect(): Promise<void>;
    getChainId(): 1;
    getAddress(): string | undefined;
    getAddresses(): string[];
    setMainAddress(): void;
    getBalance(): Promise<string>;
    signTransaction(tx: Transaction): Promise<Transaction>;
    signTransaction(tx: Transaction[]): Promise<Transaction[]>;
    sendTransaction(params: SolanaSendTransactionParams): Promise<SendTransactionResult<SolanaSubmitTransactionResult>>;
    signAndSendTransaction(params: SolanaSignAndSendTransactionParams): Promise<SendTransactionResult<SolanaSubmitTransactionResult>>;
    signMessage(msg: SolanaMessage): Promise<Signature>;
    getIcon(): string;
    getWalletState(): WalletState;
    getFeatures(): BaseFeatures[];
    supportsChain(chainId: ChainId): boolean;
}
export {};
//# sourceMappingURL=solana.d.ts.map