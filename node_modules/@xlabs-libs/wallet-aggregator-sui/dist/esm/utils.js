import { getWallets as getSuiWallets, } from "@mysten/wallet-standard";
import { SuiWallet } from "./sui";
const WALLET_DETECT_TIMEOUT = 250;
const supportsSui = (wallet) => {
    const { features } = wallet;
    return Object.entries(features).some(([featureName]) => featureName.startsWith("sui:"));
};
/**
 * Retrieve already detected wallets that support SUI
 * @param options
 * @returns An array of SuiWallet instances
 */
export const getReadyWallets = (options = {}) => {
    const wallets = getSuiWallets();
    return wallets
        .get()
        .filter(supportsSui)
        .map((w) => new SuiWallet(w, options.connection));
};
/**
 * Wait for wallets to be detected until a timeout and return them
 * @param options
 * @returns An array of SuiWallet instances
 */
export const getWallets = async (options = {}) => {
    const { timeout = WALLET_DETECT_TIMEOUT, connection } = options;
    const detector = getSuiWallets();
    const wallets = [...detector.get()];
    return new Promise((resolve) => {
        let removeListener = undefined;
        const createResolutionTimeout = () => setTimeout(() => {
            if (removeListener)
                removeListener();
            resolve(wallets.filter(supportsSui).map((w) => new SuiWallet(w, connection)));
        }, timeout);
        let resolution = createResolutionTimeout();
        removeListener = detector.on("register", (wallet) => {
            wallets.push(wallet);
            clearTimeout(resolution);
            resolution = createResolutionTimeout();
        });
    });
};
//# sourceMappingURL=utils.js.map