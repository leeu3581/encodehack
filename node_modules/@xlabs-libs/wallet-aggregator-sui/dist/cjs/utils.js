"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWallets = exports.getReadyWallets = void 0;
const wallet_standard_1 = require("@mysten/wallet-standard");
const sui_1 = require("./sui");
const WALLET_DETECT_TIMEOUT = 250;
const supportsSui = (wallet) => {
    const { features } = wallet;
    return Object.entries(features).some(([featureName]) => featureName.startsWith("sui:"));
};
/**
 * Retrieve already detected wallets that support SUI
 * @param options
 * @returns An array of SuiWallet instances
 */
const getReadyWallets = (options = {}) => {
    const wallets = (0, wallet_standard_1.getWallets)();
    return wallets
        .get()
        .filter(supportsSui)
        .map((w) => new sui_1.SuiWallet(w, options.connection));
};
exports.getReadyWallets = getReadyWallets;
/**
 * Wait for wallets to be detected until a timeout and return them
 * @param options
 * @returns An array of SuiWallet instances
 */
const getWallets = (options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const { timeout = WALLET_DETECT_TIMEOUT, connection } = options;
    const detector = (0, wallet_standard_1.getWallets)();
    const wallets = [...detector.get()];
    return new Promise((resolve) => {
        let removeListener = undefined;
        const createResolutionTimeout = () => setTimeout(() => {
            if (removeListener)
                removeListener();
            resolve(wallets.filter(supportsSui).map((w) => new sui_1.SuiWallet(w, connection)));
        }, timeout);
        let resolution = createResolutionTimeout();
        removeListener = detector.on("register", (wallet) => {
            wallets.push(wallet);
            clearTimeout(resolution);
            resolution = createResolutionTimeout();
        });
    });
});
exports.getWallets = getWallets;
//# sourceMappingURL=utils.js.map