import { Connection, ExecuteTransactionRequestType, SuiTransactionBlockResponseOptions, TransactionBlock } from "@mysten/sui.js";
import { Wallet as StandardWallet, SuiSignAndExecuteTransactionBlockOutput, SuiSignMessageInput, SuiSignMessageOutput, SuiSignTransactionBlockOutput } from "@mysten/wallet-standard";
import { BaseFeatures, CHAIN_ID_SUI, ChainId, SendTransactionResult, Wallet, WalletEvents } from "@xlabs-libs/wallet-aggregator-core";
export declare enum FeatureName {
    STANDARD__CONNECT = "standard:connect",
    STANDARD__DISCONNECT = "standard:disconnect",
    STANDARD__EVENTS = "standard:events",
    SUI__SIGN_AND_EXECUTE_TRANSACTION_BLOCK = "sui:signAndExecuteTransactionBlock",
    SUI__SIGN_TRANSACTION_BLOCK = "sui:signTransactionBlock",
    SUI__SIGN_MESSAGE = "sui:signMessage"
}
interface SignAndSendTransactionOptions {
    transactionBlock: TransactionBlock;
    requestType?: ExecuteTransactionRequestType;
    options?: SuiTransactionBlockResponseOptions;
}
type SuiNetworkInfo = {
    chain: string;
};
export declare class SuiWallet extends Wallet<typeof CHAIN_ID_SUI, void, TransactionBlock, SuiSignTransactionBlockOutput, SuiSignTransactionBlockOutput, SuiSignAndExecuteTransactionBlockOutput, SignAndSendTransactionOptions, SuiSignAndExecuteTransactionBlockOutput, SuiSignMessageInput, SuiSignMessageOutput, SuiNetworkInfo, BaseFeatures, WalletEvents> {
    private readonly wallet;
    private readonly connection?;
    private readonly _name;
    private accounts;
    private activeAccount?;
    constructor(wallet: StandardWallet, connection?: Connection | undefined);
    connect(): Promise<string[]>;
    disconnect(): Promise<void>;
    signTransaction(transactionBlock: TransactionBlock): Promise<SuiSignTransactionBlockOutput>;
    sendTransaction(tx: SuiSignTransactionBlockOutput): Promise<SendTransactionResult<SuiSignAndExecuteTransactionBlockOutput>>;
    signAndSendTransaction(options: SignAndSendTransactionOptions): Promise<SendTransactionResult<SuiSignAndExecuteTransactionBlockOutput>>;
    getName(): string;
    getUrl(): string;
    getChainId(): 21;
    getAddress(): string | undefined;
    getAddresses(): string[];
    setMainAddress(address: string): void;
    getBalance(): Promise<string>;
    signMessage(msg: SuiSignMessageInput): Promise<SuiSignMessageOutput>;
    getIcon(): string;
    isConnected(): boolean;
    getNetworkInfo(): SuiNetworkInfo | undefined;
    private getFeature;
    getFeatures(): BaseFeatures[];
    supportsChain(chainId: ChainId): boolean;
}
export {};
//# sourceMappingURL=sui.d.ts.map