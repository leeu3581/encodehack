import { AccountAuthenticator } from "@aptos-labs/ts-sdk";
import { NetworkInfo, SignMessagePayload, SignMessageResponse, WalletCore, AnyAptosWallet, AnyRawTransaction, InputTransactionData, Wallet as IAptosWallet, DappConfig } from "@aptos-labs/wallet-adapter-core";
import { BaseFeatures, CHAIN_ID_APTOS, ChainId, SendTransactionResult, Wallet, WalletState } from "@xlabs-libs/wallet-aggregator-core";
import type { Types as AptosLegacyTypes } from "aptos";
export interface AptosSubmitResult {
    hash: AptosLegacyTypes.HexEncodedBytes;
}
export type AptosMessage = string | SignMessagePayload | Uint8Array;
export type SignedAptosMessage = string | SignMessageResponse;
type SendTransactionInput = {
    transaction: AnyRawTransaction;
    senderAuthenticator: AccountAuthenticator;
};
export declare class AptosWallet extends Wallet<typeof CHAIN_ID_APTOS, void, AnyRawTransaction, AccountAuthenticator, SendTransactionInput, AptosSubmitResult, InputTransactionData, AptosSubmitResult, AptosMessage, SignedAptosMessage, NetworkInfo> {
    private readonly selectedAptosWallet;
    private readonly walletCore;
    private address;
    private network;
    /**
     * @param selectedAptosWallet The Aptos wallet adapter which will serve as the underlying connection to the wallet
     * @param walletCore WalletCore class obtained via walletCoreFactory static function
     */
    constructor(selectedAptosWallet: AnyAptosWallet, walletCore: WalletCore);
    /**
     * @param config WalletCore configuration
     * @param withNonStandard Add nonstandard wallets to the wallet core, these includes the following wallets:
     * - BitgetWallet
     * - MartianWallet
     * - MSafeWalletAdapter
     * - OKXWallet
     * - PontemWallet
     * - TrustWallet
     * - FewchaWallet
     * - PetraWallet
     * @param newWalletsToAdd Add new wallets to the wallet core
     * @returns {WalletCore} WalletCore instance
     */
    static walletCoreFactory(config?: DappConfig, withNonStandard?: boolean, newWalletsToAdd?: IAptosWallet[]): WalletCore;
    getName(): string;
    getUrl(): string;
    connect(): Promise<string[]>;
    getNetworkInfo(): NetworkInfo | undefined;
    isConnected(): boolean;
    disconnect(): Promise<void>;
    getChainId(): 22;
    getAddress(): string | undefined;
    getAddresses(): string[];
    setMainAddress(): void;
    getBalance(): Promise<string>;
    signTransaction(tx: AnyRawTransaction): Promise<AccountAuthenticator>;
    sendTransaction(txInput: SendTransactionInput): Promise<SendTransactionResult<AptosSubmitResult>>;
    signAndSendTransaction(tx: InputTransactionData): Promise<SendTransactionResult<AptosSubmitResult>>;
    signMessage(msg: SignMessagePayload): Promise<SignedAptosMessage>;
    getIcon(): string;
    getWalletState(): WalletState;
    getFeatures(): BaseFeatures[];
    supportsChain(chainId: ChainId): boolean;
}
export {};
//# sourceMappingURL=aptos.d.ts.map