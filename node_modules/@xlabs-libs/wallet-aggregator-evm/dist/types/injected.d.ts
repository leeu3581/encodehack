import { InjectedConnector } from "@wagmi/core/connectors/injected";
import { EVMWallet, EVMWalletConfig, EVMWalletType } from "./evm";
export declare enum InjectedWallets {
    MetaMask = "MetaMask",
    BitgetWallet = "Bitget Wallet",
    BraveWallet = "Brave Wallet",
    KuCoinWallet = "KuCoin Wallet",
    CoinbaseWallet = "Coinbase Wallet",
    FrontierWallet = "Frontier Wallet",
    BitKeepWallet = "BitKeep",
    OKXWallet = "OKX Wallet",
    RabbyWallet = "Rabby Wallet",
    Generic = "Injected Wallet",
    OktoWallet = "Okto Wallet"
}
interface InjectedWalletOptions {
    name?: string | ((detectedName: string | string[]) => string);
}
export type InjectedWalletConfig = EVMWalletConfig<InjectedWalletOptions> & {
    /** @description Name to show when no wallet is detected */
    genericName?: string;
    /** @description Icon to show when no wallet is detected */
    genericIcon?: string;
    /** @description Url to show when no wallet is detected */
    genericUrl?: string;
    /** @description Show as a generic wallet regardless of what extension is installed or detected */
    showAsGeneric?: boolean;
    /** @description Name of a specific wallet to detect. This will override the connector options `name` parameter. */
    name?: InjectedWallets;
};
export declare class InjectedWallet extends EVMWallet<InjectedConnector, InjectedWalletOptions> {
    protected config: InjectedWalletConfig;
    constructor(config?: InjectedWalletConfig);
    createConnector(): InjectedConnector;
    getName(): string;
    getUrl(): string;
    getIcon(): string;
    static getWalletType(): EVMWalletType;
}
export {};
//# sourceMappingURL=injected.d.ts.map