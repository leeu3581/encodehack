import { InjectedConnector } from "@wagmi/core";
import { EVMWallet } from "./evm";
import { WalletState } from "@xlabs-libs/wallet-aggregator-core";
type ProviderDetail = {
    info: {
        icon: string;
        name: string;
        rdns: string;
        uuid: string;
    };
    provider: any;
};
type AnounceProvider = {
    detail: ProviderDetail;
};
type Eip6963WalletOptions = {
    name: string;
};
declare global {
    interface WindowEventMap {
        "eip6963:announceProvider": AnounceProvider;
    }
}
declare class Eip6963Connector extends InjectedConnector {
    readonly wallet: Eip6963Wallet;
    constructor(wallet: Eip6963Wallet, options: any);
    getProvider(): any;
}
/**
 * Add a new entry to support a new wallet
 * that supports EIP-6963
 */
export declare enum Eip6963Wallets {
    PhantomWallet = "Phantom",
    MetaMaskWallet = "MetaMask",
    BackpackWallet = "Backpack",
    CoinbaseWallet = "Coinbase Wallet",
    NightlyWallet = "Nightly",
    RabbyWallet = "Rabby Wallet"
}
interface WalletDetails {
    name: string;
    url: string;
    icon: string;
}
export declare class Eip6963Wallet extends EVMWallet<Eip6963Connector, Eip6963WalletOptions> {
    detail: ProviderDetail | null;
    private details;
    name: string;
    constructor(config: Eip6963Wallets | WalletDetails);
    registerProvider: (event: AnounceProvider) => void;
    createConnector(): Eip6963Connector;
    getName(): string;
    getUrl(): string;
    getIcon(): string;
    getWalletState(): WalletState;
}
export {};
//# sourceMappingURL=eip6963.d.ts.map