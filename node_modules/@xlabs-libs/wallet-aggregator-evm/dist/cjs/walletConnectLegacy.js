"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletConnectLegacyWallet = void 0;
const walletConnectLegacy_1 = require("@wagmi/core/connectors/walletConnectLegacy");
const walletConnectBase_1 = require("./walletConnectBase");
class WalletConnectLegacyWallet extends walletConnectBase_1.BaseWalletConnectWallet {
    constructor(config = {}) {
        super(config);
    }
    createConnector() {
        const options = Object.assign({
            storageId: "wallet-aggregator-sdk-evm-walletconnect-legacy",
        }, this.connectorOptions);
        return new walletConnectLegacy_1.WalletConnectLegacyConnector({
            chains: this.chains,
            options,
        });
    }
    connect() {
        const _super = Object.create(null, {
            connect: { get: () => super.connect }
        });
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const accounts = yield _super.connect.call(this);
            // hacky fix: when no preferred chain is set, the provider will not configure an http/rpc endpoint
            // only when changing the network, it'll detect it through the networkChanged event and configure
            // it accordingly
            if ((_a = this.network) === null || _a === void 0 ? void 0 : _a.chainId) {
                // @eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                const innerProvider = (yield this.connector.getProvider());
                // @eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                innerProvider.http = innerProvider.setHttpProvider(this.network.chainId);
            }
            return accounts;
        });
    }
}
exports.WalletConnectLegacyWallet = WalletConnectLegacyWallet;
//# sourceMappingURL=walletConnectLegacy.js.map