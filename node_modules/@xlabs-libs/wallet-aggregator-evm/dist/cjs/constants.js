"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTestnetEvm = exports.evmChainIdToChainId = exports.EVM_TESTNET_CHAIN_ID_TO_NAME = exports.EVM_CHAIN_ID_TO_NAME = exports.EVM_CHAINS_TESTNET = exports.EVM_CHAINS = void 0;
const wallet_aggregator_core_1 = require("@xlabs-libs/wallet-aggregator-core");
exports.EVM_CHAINS = {
    ethereum: 1,
    bsc: 56,
    polygon: 137,
    avalanche: 43114,
    oasis: 42262,
    aurora: 1313161554,
    fantom: 250,
    karura: 686,
    acala: 787,
    klaytn: 8217,
    celo: 42220,
    neon: 245022934,
    arbitrum: 42161,
    moonbeam: 1284,
    optimism: 10,
    gnosis: 100,
    base: 8453,
    scroll: 534352,
    blast: 81457,
    xlayer: 196,
    mantle: 5000,
    worldchain: 480,
    unichain: 130,
};
exports.EVM_CHAINS_TESTNET = {
    ethereum: 17000,
    bsc: 97,
    polygon: 80001,
    avalanche: 43113,
    oasis: 42261,
    aurora: 1313161555,
    fantom: 4002,
    karura: 596,
    acala: 597,
    klaytn: 1001,
    celo: 44787,
    neon: 245022926,
    arbitrum: 421613,
    optimism: 420,
    moonbeam: 1287,
    base: 84531,
    scroll: 534351,
    blast: 168587773,
    xlayer: 195,
    mantle: 5001,
    worldchain: 4801,
    unichain: 1301,
    monad: 10143,
};
const invertMap = (map) => Object.entries(map).reduce((obj, [name, id]) => {
    return Object.assign(obj, { [id]: name });
}, {});
exports.EVM_CHAIN_ID_TO_NAME = invertMap(exports.EVM_CHAINS);
exports.EVM_TESTNET_CHAIN_ID_TO_NAME = invertMap(exports.EVM_CHAINS_TESTNET);
function evmChainIdToChainId(evmChainId, network = "MAINNET") {
    let chainName;
    if (network === "MAINNET")
        chainName = exports.EVM_CHAIN_ID_TO_NAME[evmChainId];
    if (network === "TESTNET")
        chainName = exports.EVM_TESTNET_CHAIN_ID_TO_NAME[evmChainId];
    if (chainName === undefined)
        throw new Error(`No chain found for evm chain id ${evmChainId}`);
    return wallet_aggregator_core_1.CHAINS[chainName];
}
exports.evmChainIdToChainId = evmChainIdToChainId;
function isTestnetEvm(chainId) {
    const ids = Object.values(exports.EVM_CHAINS_TESTNET);
    return ids.includes(chainId);
}
exports.isTestnetEvm = isTestnetEvm;
//# sourceMappingURL=constants.js.map