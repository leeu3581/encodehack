import WalletConnectProvider from '@binance/w3w-ethereum-provider';
import { Connector, Chain, WalletClient } from 'wagmi';
import { InjectedConnector } from 'wagmi/connectors/injected';

type WalletConnectOptions = ConstructorParameters<typeof WalletConnectProvider>[0];
declare class BinanceW3WConnector extends Connector<WalletConnectProvider, WalletConnectOptions> {
    #private;
    readonly id = "BinanceW3W";
    readonly name = "BinanceW3W";
    readonly ready = true;
    constructor(config: {
        chains?: Chain[];
        options?: WalletConnectOptions;
    });
    connect: ({ chainId }?: {
        chainId?: number;
    }) => Promise<{
        account: `0x${string}`;
        chain: {
            id: number;
            unsupported: boolean;
        };
    }>;
    disconnect(): Promise<void>;
    getAccount(): Promise<`0x${string}`>;
    getChainId(): Promise<number>;
    getProvider({ chainId, create, }?: {
        chainId?: number;
        create?: boolean;
    }): Promise<WalletConnectProvider>;
    getWalletClient({ chainId, }?: {
        chainId?: number;
    }): Promise<WalletClient>;
    isAuthorized(): Promise<boolean>;
    switchChain(chainId: number): Promise<Chain>;
    protected onAccountsChanged: (accounts: string[]) => void;
    protected onChainChanged: (chainId: number | string) => void;
    protected onDisconnect: () => void;
}
declare const getWagmiConnector: () => typeof BinanceW3WConnector | typeof InjectedConnector;

export { getWagmiConnector };
