{"version":3,"sources":["../src/index.ts"],"names":["isInBinance","log","normalizeChainId","UserRejectedRequestError","createWalletClient","getAddress","custom","numberToHex","SwitchChainError","Connector","InjectedConnector","_provider","_chainId","_lng","BinanceW3WConnector","config","__publicField","__privateAdd","chainId","__privateGet","targetChainId","lastUsedChainId","provider","accounts","account","id","unsupported","error","__privateSet","create","rpc","rpcProps","chain","WalletConnectProvider","x","res","message","getWagmiConnector"],"mappings":"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","sourcesContent":["import type WalletConnectProvider from '@binance/w3w-ethereum-provider'\nimport { isInBinance, log, normalizeChainId } from '@binance/w3w-utils'\nimport {\n  UserRejectedRequestError,\n  ProviderRpcError,\n  createWalletClient,\n  getAddress,\n  custom,\n  numberToHex,\n  SwitchChainError,\n} from 'viem'\nimport { Connector, WalletClient, Chain } from 'wagmi'\nimport { InjectedConnector } from 'wagmi/connectors/injected'\n\nimport { StorageStoreData } from './types'\n\ntype WalletConnectOptions = ConstructorParameters<\n  typeof WalletConnectProvider\n>[0]\n\nclass BinanceW3WConnector extends Connector<\n  WalletConnectProvider,\n  WalletConnectOptions\n> {\n  readonly id = 'BinanceW3W'\n  readonly name = 'BinanceW3W'\n  readonly ready = true\n\n  #provider?: WalletConnectProvider\n  #chainId?: number\n  #lng?: string\n  constructor(config: { chains?: Chain[]; options?: WalletConnectOptions }) {\n    super({ options: {}, ...config })\n    this.#chainId = config?.options?.chainId || 56\n    this.#lng = config?.options?.lng || 'en'\n  }\n\n  connect = async (\n    { chainId }: { chainId?: number } = { chainId: this.#chainId }\n  ) => {\n    chainId = chainId ?? this.#chainId ?? 56\n    log.debug('ðŸš€ ~ connect ~ chainId:', chainId)\n    try {\n      let targetChainId = chainId\n      if (!targetChainId) {\n        const store = this.storage?.getItem<StorageStoreData>('store')\n        const lastUsedChainId = store?.state?.data?.chain?.id\n        if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId))\n          targetChainId = lastUsedChainId\n      }\n\n      const provider = await this.getProvider({\n        chainId: targetChainId,\n        create: true,\n      })\n      provider.on('accountsChanged', this.onAccountsChanged)\n      provider.on('chainChanged', this.onChainChanged)\n      provider.on('disconnect', this.onDisconnect)\n\n      // Defer message to the next tick to ensure wallet connect data (provided by `.enable()`) is available\n      setTimeout(() => this.emit('message', { type: 'connecting' }), 0)\n\n      provider.setLng(this.#lng)\n      const accounts = await provider.enable()\n      const account = getAddress(accounts[0])\n      const id = await this.getChainId()\n      const unsupported = this.isChainUnsupported(id)\n\n      return {\n        account,\n        chain: { id, unsupported },\n      }\n    } catch (error) {\n      if (error.code === 100001) throw new UserRejectedRequestError(error)\n      throw error\n    }\n  }\n\n  async disconnect() {\n    const provider = await this.getProvider()\n    provider.disconnect()\n\n    provider.removeListener('accountsChanged', this.onAccountsChanged)\n    provider.removeListener('chainChanged', this.onChainChanged)\n    provider.removeListener('disconnect', this.onDisconnect)\n\n    typeof localStorage !== 'undefined' &&\n      localStorage.removeItem('walletconnect')\n  }\n\n  async getAccount() {\n    const provider = await this.getProvider()\n    const accounts = provider.accounts\n    // return checksum address\n    return getAddress(accounts[0])\n  }\n\n  async getChainId() {\n    const provider = await this.getProvider()\n    const chainId = normalizeChainId(provider.chainId)\n    return chainId\n  }\n\n  async getProvider({\n    chainId,\n    create,\n  }: { chainId?: number; create?: boolean } = {}) {\n    // Force create new provider\n    if (!this.#provider || chainId || create) {\n      const rpc = !this.options?.infuraId\n        ? this.chains.reduce(\n            (rpcProps, chain) => ({\n              ...rpcProps,\n              [chain.id]: chain.rpcUrls.default.http[0],\n            }),\n            {}\n          )\n        : {}\n\n      const WalletConnectProvider = (\n        await import('@binance/w3w-ethereum-provider')\n      ).default\n      this.#provider = new WalletConnectProvider({\n        ...this.options,\n        chainId,\n        rpc: { ...rpc, ...this.options?.rpc },\n      })\n    }\n\n    return this.#provider\n  }\n\n  async getWalletClient({\n    chainId,\n  }: { chainId?: number } = {}): Promise<WalletClient> {\n    const [provider, account] = await Promise.all([\n      this.getProvider({ chainId }),\n      this.getAccount(),\n    ])\n    const chain = this.chains.find((x) => x.id === chainId)\n    if (!provider) throw new Error('provider is required.')\n    return createWalletClient({\n      account,\n      chain,\n      transport: custom(provider),\n    })\n  }\n\n  async isAuthorized() {\n    try {\n      const account = await this.getAccount()\n      return !!account\n    } catch {\n      return false\n    }\n  }\n\n  async switchChain(chainId: number) {\n    const provider = await this.getProvider()\n    const id = numberToHex(chainId)\n\n    try {\n      // Set up a race between `wallet_switchEthereumChain` & the `chainChanged` event\n      // to ensure the chain has been switched. This is because there could be a case\n      // where a wallet may not resolve the `wallet_switchEthereumChain` method, or\n      // resolves slower than `chainChanged`.\n      await Promise.race([\n        provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: id }],\n        }),\n        new Promise((res) =>\n          this.on('change', ({ chain }) => {\n            if (chain?.id === chainId) res(chainId)\n          })\n        ),\n      ])\n      return (\n        this.chains.find((x) => x.id === chainId) ??\n        ({\n          id: chainId,\n          name: `Chain ${id}`,\n          network: `${id}`,\n          nativeCurrency: { name: 'Ether', decimals: 18, symbol: 'ETH' },\n          rpcUrls: { default: { http: [''] }, public: { http: [''] } },\n        } as Chain)\n      )\n    } catch (error) {\n      const message =\n        typeof error === 'string' ? error : (error as ProviderRpcError)?.message\n      if (/user rejected request/i.test(message))\n        throw new UserRejectedRequestError(error)\n      throw new SwitchChainError(error)\n    }\n  }\n\n  protected onAccountsChanged = (accounts: string[]) => {\n    if (accounts.length === 0) this.emit('disconnect')\n    else this.emit('change', { account: getAddress(accounts[0]) })\n  }\n\n  protected onChainChanged = (chainId: number | string) => {\n    const id = normalizeChainId(chainId)\n    const unsupported = this.isChainUnsupported(id)\n    this.emit('change', { chain: { id, unsupported } })\n  }\n\n  protected onDisconnect = () => {\n    this.emit('disconnect')\n  }\n}\n\nexport const getWagmiConnector = () => {\n  if (isInBinance()) {\n    return InjectedConnector\n  }\n  return BinanceW3WConnector\n}\n"]}